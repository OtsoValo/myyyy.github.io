<?xml version="1.0" encoding="UTF-8"?>
<!-- <feed xmlns="http://www.w3.org/2005/Atom"> -->
<feed>
    <id>https://byetimes.com</id>
    <title>Ben Kurtovic</title>
    <updated>2017-02-17T19:51:19+08:00</updated>
    <link href="https://byetimes.com/"/>
    <link rel="self" type="application/atom+xml" href="/atom.xml"/>
    <author>
        <name>Ben Kurtovic</name>
        <email>ben.kurtovic@gmail.com</email>
        <uri>https://benkurtovic.com/</uri>
    </author>
    <icon>/static/favicon.png</icon>
    <rights>© 2011–2017 Ben Kurtovic</rights>
    
        <entry>
            <id>https://byetimes.com/2017/02/17/test</id>
            <title>Test</title>
            <updated>2017-02-17T00:00:00+08:00</updated>
            <published>2017-02-17T00:00:00+08:00</published>
            <link rel="alternate" type="text/html" href="/2017/02/17/test.html"/>
            <author>
                <name>Ben Kurtovic</name>
                <email>ben.kurtovic@gmail.com</email>
                <uri>https://benkurtovic.com/</uri>
            </author>
            <summary>Test Page</summary>
            <content type="html">&lt;p&gt;Not much to say about recent work, but I’d like to share a lecture I wrote for
the honors section of the
&lt;a href=&quot;https://cs.illinois.edu/courses/profile/CS241&quot;&gt;systems programming course&lt;/a&gt;
I am helping teach. It’s a broad overview on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_buffer_overflow&quot;&gt;stack buffer overflow&lt;/a&gt;
exploits and common defenses, for the newbie systems programmer, with a few
pretty diagrams that I spent way too much time on…&lt;/p&gt;

&lt;p&gt;(Apologies about the PDF viewer if it’s not looking quite right. &lt;a href=&quot;/static/content/stack-smashing.pdf&quot;&gt;You can view the slides directly&lt;/a&gt;.)&lt;/p&gt;

&lt;object data=&quot;/static/content/stack-smashing.pdf#zoom=150&quot; type=&quot;application/pdf&quot; width=&quot;100%&quot; height=&quot;600px&quot;&gt;
   &lt;p&gt;&lt;a href=&quot;/static/content/stack-smashing.pdf&quot;&gt;View PDF&lt;/a&gt;&lt;/p&gt;
&lt;/object&gt;
</content>
        </entry>
    
        <entry>
            <id>https://byetimes.com/2016/05/25/stack-smashing</id>
            <title>Stack wSmashing</title>
            <updated>2016-05-25T00:00:00+08:00</updated>
            <published>2016-05-25T00:00:00+08:00</published>
            <link rel="alternate" type="text/html" href="/2016/05/25/stack-smashing.html"/>
            <author>
                <name>Ben Kurtovic</name>
                <email>ben.kurtovic@gmail.com</email>
                <uri>https://benkurtovic.com/</uri>
            </author>
            <summary>wSlides from a lecture on low-level software exploits and defenses</summary>
            <content type="html">&lt;p&gt;Not much to say about recent work, but I’d like to share a lecture I wrote for
the honors section of the
&lt;a href=&quot;https://cs.illinois.edu/courses/profile/CS241&quot;&gt;systems programming course&lt;/a&gt;
I am helping teach. It’s a broad overview on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_buffer_overflow&quot;&gt;stack buffer overflow&lt;/a&gt;
exploits and common defenses, for the newbie systems programmer, with a few
pretty diagrams that I spent way too much time on…&lt;/p&gt;

&lt;p&gt;(Apologies about the PDF viewer if it’s not looking quite right. &lt;a href=&quot;/static/content/stack-smashing.pdf&quot;&gt;You can view the slides directly&lt;/a&gt;.)&lt;/p&gt;

&lt;object data=&quot;/static/content/stack-smashing.pdf#zoom=150&quot; type=&quot;application/pdf&quot; width=&quot;100%&quot; height=&quot;600px&quot;&gt;
   &lt;p&gt;&lt;a href=&quot;/static/content/stack-smashing.pdf&quot;&gt;View PDF&lt;/a&gt;&lt;/p&gt;
&lt;/object&gt;
</content>
        </entry>
    
        <entry>
            <id>https://byetimes.com/2016/04/25/stack-smashing</id>
            <title>Stack Smashing</title>
            <updated>2016-04-25T00:00:00+08:00</updated>
            <published>2016-04-25T00:00:00+08:00</published>
            <link rel="alternate" type="text/html" href="/2016/04/25/stack-smashing.html"/>
            <author>
                <name>Ben Kurtovic</name>
                <email>ben.kurtovic@gmail.com</email>
                <uri>https://benkurtovic.com/</uri>
            </author>
            <summary>Slides from a lecture on low-level software exploits and defenses</summary>
            <content type="html">&lt;p&gt;Not much to say about recent work, but I’d like to share a lecture I wrote for
the honors section of the
&lt;a href=&quot;https://cs.illinois.edu/courses/profile/CS241&quot;&gt;systems programming course&lt;/a&gt;
I am helping teach. It’s a broad overview on
&lt;a href=&quot;https://en.wikipedia.org/wiki/Stack_buffer_overflow&quot;&gt;stack buffer overflow&lt;/a&gt;
exploits and common defenses, for the newbie systems programmer, with a few
pretty diagrams that I spent way too much time on…&lt;/p&gt;

&lt;p&gt;(Apologies about the PDF viewer if it’s not looking quite right. &lt;a href=&quot;/static/content/stack-smashing.pdf&quot;&gt;You can view the slides directly&lt;/a&gt;.)&lt;/p&gt;

&lt;object data=&quot;/static/content/stack-smashing.pdf#zoom=150&quot; type=&quot;application/pdf&quot; width=&quot;100%&quot; height=&quot;600px&quot;&gt;
   &lt;p&gt;&lt;a href=&quot;/static/content/stack-smashing.pdf&quot;&gt;View PDF&lt;/a&gt;&lt;/p&gt;
&lt;/object&gt;
</content>
        </entry>
    
        <entry>
            <id>https://byetimes.com/2015/01/28/python-object-replacement</id>
            <title>Finding and Replacing Objects in Python</title>
            <updated>2015-01-28T00:00:00+08:00</updated>
            <published>2015-01-28T00:00:00+08:00</published>
            <link rel="alternate" type="text/html" href="/2015/01/28/python-object-replacement.html"/>
            <author>
                <name>Ben Kurtovic</name>
                <email>ben.kurtovic@gmail.com</email>
                <uri>https://benkurtovic.com/</uri>
            </author>
            <summary>More reflection than you cared to ask for</summary>
            <content type="html">&lt;p&gt;Today, we’re going to demonstrate a fairly evil thing in Python, which I call
&lt;em&gt;object replacement&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Say you have some program that’s been running for a while, and a particular
object has made its way throughout your code. It lives inside lists, class
attributes, maybe even inside some closures. You want to completely replace
this object with another one; that is to say, you want to find all references
to object &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; and replace them with object &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;, enabling &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; to be garbage
collected. This has some interesting implications for special object types. If
you have methods that are bound to &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;, you want to rebind them to &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;. If &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt;
is a class, you want all instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; to become instances of &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;. And so
on.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;But why on Earth would you want to do that?&lt;/em&gt; you ask. I’ll focus on a concrete
use case in a future post, but for now, I imagine this could be useful in some
kind of advanced unit testing situation with mock objects. Still, it’s fairly
insane, so let’s leave it primarily as an intellectual exercise.&lt;/p&gt;

&lt;p&gt;This article is written for &lt;a href=&quot;https://en.wikipedia.org/wiki/CPython&quot;&gt;CPython&lt;/a&gt;
2.7.&lt;sup&gt;&lt;a id=&quot;ref1&quot; href=&quot;#fn1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;

&lt;p&gt;First, a recap on terminology here. You can skip this section if you know
Python well.&lt;/p&gt;

&lt;p&gt;In Python, &lt;em&gt;names&lt;/em&gt; are what most languages call “variables”. They reference
&lt;em&gt;objects&lt;/em&gt;. So when we do:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…we are creating a list object with four integers, and binding it to the name
&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;. In graph form:&lt;sup&gt;&lt;a id=&quot;ref2&quot; href=&quot;#fn2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;svg width=&quot;223pt&quot; height=&quot;44pt&quot; viewbox=&quot;0.00 0.00 223.01 44.00&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 40)&quot;&gt;&lt;polygon fill=&quot;white&quot; stroke=&quot;none&quot; points=&quot;-4,4 -4,-40 219.012,-40 219.012,4 -4,4&quot; /&gt;&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;&lt;title&gt;L&lt;/title&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;215.018,-36 126.994,-36 126.994,-0 215.018,-0 215.018,-36&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;171.006&quot; y=&quot;-15&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;10.00&quot;&gt;[1, 2, 3, 4]&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;&lt;title&gt;a&lt;/title&gt;&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; cx=&quot;27&quot; cy=&quot;-18&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;27&quot; y=&quot;-13.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;a&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;&lt;title&gt;a&amp;#45;&amp;gt;L&lt;/title&gt;&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; d=&quot;M54.0461,-18C72.2389,-18 97.1211,-18 119.173,-18&quot; /&gt;&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;119.339,-20.6251 126.839,-18 119.339,-15.3751 119.339,-20.6251&quot; /&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;

&lt;p&gt;In each of the following examples, we are creating new &lt;em&gt;references&lt;/em&gt; to the
list object, but we are never duplicating it. Each reference points to the same
memory address (which you can get using &lt;code class=&quot;highlighter-rouge&quot;&gt;id(a)&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SomeContainerClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;svg width=&quot;254pt&quot; height=&quot;234pt&quot; viewbox=&quot;0.00 0.00 253.96 234.00&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 238)&quot;&gt;&lt;polygon fill=&quot;white&quot; stroke=&quot;none&quot; points=&quot;-4,4 -4,-238 249.96,-238 249.96,4 -4,4&quot; /&gt;&lt;g id=&quot;clust3&quot; class=&quot;cluster&quot;&gt;&lt;title&gt;cluster0&lt;/title&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;8,-8 8,-82 78,-82 78,-8 8,-8&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;43&quot; y=&quot;-66.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;d&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;&lt;title&gt;obj&lt;/title&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;245.966,-153 157.943,-153 157.943,-117 245.966,-117 245.966,-153&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;201.954&quot; y=&quot;-132&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;10.00&quot;&gt;[1, 2, 3, 4]&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;&lt;title&gt;a&lt;/title&gt;&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; cx=&quot;43&quot; cy=&quot;-216&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;43&quot; y=&quot;-211.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;a&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;&lt;title&gt;a&amp;#45;&amp;gt;obj&lt;/title&gt;&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; d=&quot;M64.8423,-205.244C88.7975,-192.881 128.721,-172.278 159.152,-156.573&quot; /&gt;&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;160.422,-158.872 165.883,-153.1 158.014,-154.206 160.422,-158.872&quot; /&gt;&lt;/g&gt;&lt;g id=&quot;node3&quot; class=&quot;node&quot;&gt;&lt;title&gt;b&lt;/title&gt;&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; cx=&quot;43&quot; cy=&quot;-162&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;43&quot; y=&quot;-157.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;b&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;edge2&quot; class=&quot;edge&quot;&gt;&lt;title&gt;b&amp;#45;&amp;gt;obj&lt;/title&gt;&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; d=&quot;M69.2174,-157.662C90.9996,-153.915 123.147,-148.385 150.231,-143.726&quot; /&gt;&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;150.777,-146.295 157.724,-142.437 149.887,-141.121 150.777,-146.295&quot; /&gt;&lt;/g&gt;&lt;g id=&quot;node4&quot; class=&quot;node&quot;&gt;&lt;title&gt;c&lt;/title&gt;&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; cx=&quot;43&quot; cy=&quot;-108&quot; rx=&quot;41.897&quot; ry=&quot;18&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;43&quot; y=&quot;-103.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;c.data&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;edge3&quot; class=&quot;edge&quot;&gt;&lt;title&gt;c&amp;#45;&amp;gt;obj&lt;/title&gt;&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; d=&quot;M82.3954,-114.605C102.772,-118.11 128.077,-122.463 150.069,-126.247&quot; /&gt;&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;149.86,-128.874 157.697,-127.559 150.75,-123.7 149.86,-128.874&quot; /&gt;&lt;/g&gt;&lt;g id=&quot;node5&quot; class=&quot;node&quot;&gt;&lt;title&gt;L&lt;/title&gt;&lt;ellipse fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; cx=&quot;43&quot; cy=&quot;-34&quot; rx=&quot;27&quot; ry=&quot;18&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;43&quot; y=&quot;-29.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;L&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;edge4&quot; class=&quot;edge&quot;&gt;&lt;title&gt;L&amp;#45;&amp;gt;obj&lt;/title&gt;&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; d=&quot;M62.9324,-46.183C88.5083,-62.6411 134.554,-92.2712 166.386,-112.755&quot; /&gt;&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;165.223,-115.128 172.951,-116.98 168.064,-110.714 165.223,-115.128&quot; /&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;

&lt;p&gt;Note that these references are all equal. &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is no more valid a name for the
list than &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;c.data&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;L&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;d.func_closure[0].cell_contents&lt;/code&gt; to the
outside world). As a result, if you delete one of these references—explicitly
with &lt;code class=&quot;highlighter-rouge&quot;&gt;del a&lt;/code&gt;, or implicitly if a name goes out of scope—then the other
references are still around, and object continues to exist. If all of an
object’s references disappear, then Python’s garbage collector should eliminate
it.&lt;/p&gt;

&lt;h2 id=&quot;dead-ends&quot;&gt;Dead ends&lt;/h2&gt;

&lt;p&gt;My first thought when approaching this problem was to physically write over the
memory where our target object is stored. This can be done using
&lt;a href=&quot;https://docs.python.org/2/library/ctypes.html#ctypes.memmove&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctypes.memmove()&lt;/code&gt;&lt;/a&gt;
from the Python standard library:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; class A(object): pass
...
&amp;gt;&amp;gt;&amp;gt; class B(object): pass
...
&amp;gt;&amp;gt;&amp;gt; obj = A()
&amp;gt;&amp;gt;&amp;gt; print obj
&amp;lt;__main__.A object at 0x10e3e1190&amp;gt;
&amp;gt;&amp;gt;&amp;gt; import ctypes
&amp;gt;&amp;gt;&amp;gt; ctypes.memmove(id(A), id(B), object.__sizeof__(A))
140576340136752
&amp;gt;&amp;gt;&amp;gt; print obj
&amp;lt;__main__.B object at 0x10e3e1190&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What we are doing here is overwriting the fields of the &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; instance of the
&lt;a href=&quot;https://github.com/python/cpython/blob/2.7/Include/classobject.h#L12&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PyClassObject&lt;/code&gt; C struct&lt;/a&gt;
with fields from the &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; struct instance. As a result, they now share various
properties, such as their attribute dictionaries
(&lt;a href=&quot;https://docs.python.org/2/reference/datamodel.html#the-standard-type-hierarchy&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__dict__&lt;/code&gt;&lt;/a&gt;).
So, we can do things like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; B.foo = 123
&amp;gt;&amp;gt;&amp;gt; obj.foo
123&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, there are clear issues. What we’ve done is create a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Object_copy#Shallow_copy&quot;&gt;&lt;em&gt;shallow copy&lt;/em&gt;&lt;/a&gt;.
Therefore, &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; are still distinct objects, so certain changes made to
one will not be replicated to the other:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; A is B
False
&amp;gt;&amp;gt;&amp;gt; B.__name__ = &quot;C&quot;
&amp;gt;&amp;gt;&amp;gt; A.__name__
&#39;B&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, this won’t work if &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; are different sizes, since we will be
either reading from or writing to memory that we don’t necessarily own:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; A = ()
&amp;gt;&amp;gt;&amp;gt; B = []
&amp;gt;&amp;gt;&amp;gt; print A.__sizeof__(), B.__sizeof__()
24 40
&amp;gt;&amp;gt;&amp;gt; import ctypes
&amp;gt;&amp;gt;&amp;gt; ctypes.memmove(id(A), id(B), A.__sizeof__())
4321271888
Python(33575,0x7fff76925300) malloc: *** error for object 0x6f: pointer being freed was not allocated
*** set a breakpoint in malloc_error_break to debug
Abort trap: 6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Oh, and there’s a bit of a problem when we deallocate these objects, too…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; A = []
&amp;gt;&amp;gt;&amp;gt; B = range(8)
&amp;gt;&amp;gt;&amp;gt; import ctypes
&amp;gt;&amp;gt;&amp;gt; ctypes.memmove(id(A), id(B), A.__sizeof__())
4514685728
&amp;gt;&amp;gt;&amp;gt; print A
[0, 1, 2, 3, 4, 5, 6, 7]
&amp;gt;&amp;gt;&amp;gt; del A
&amp;gt;&amp;gt;&amp;gt; del B
Segmentation fault: 11&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;fishing-for-references-with-guppy&quot;&gt;Fishing for references with Guppy&lt;/h2&gt;

&lt;p&gt;A more appropriate solution is finding all of the &lt;em&gt;references&lt;/em&gt; to the old
object, and then updating them to point to the new object, rather than
replacing the old object directly.&lt;/p&gt;

&lt;p&gt;But how do we track references? Fortunately, there’s a library called
&lt;a href=&quot;http://guppy-pe.sourceforge.net/&quot;&gt;Guppy&lt;/a&gt; that allows us to do this. Often used
for diagnosing memory leaks, we can take advantage of its robust object
tracking features here. Install it with &lt;a href=&quot;https://pypi.python.org/pypi/pip&quot;&gt;pip&lt;/a&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;pip install guppy&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;I’ve always found Guppy hard to use (as many debuggers are, though justified by
the complexity of the task involved), so we’ll begin with a feature demo before
delving into the actual problem.&lt;/p&gt;

&lt;h3 id=&quot;feature-demonstration&quot;&gt;Feature demonstration&lt;/h3&gt;

&lt;p&gt;Guppy’s interface is deceptively simple. We begin by calling
&lt;a href=&quot;http://guppy-pe.sourceforge.net/guppy.html#kindnames.guppy.hpy&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;guppy.hpy()&lt;/code&gt;&lt;/a&gt;,
to expose the Heapy interface, which is the component of Guppy with the
features we want:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import guppy
&amp;gt;&amp;gt;&amp;gt; hp = guppy.hpy()
&amp;gt;&amp;gt;&amp;gt; hp
Top level interface to Heapy.
Use eg: hp.doc for more info on hp.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Calling
&lt;a href=&quot;http://guppy-pe.sourceforge.net/heapy_Use.html#heapykinds.Use.heap&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hp.heap()&lt;/code&gt;&lt;/a&gt;
shows us a table of the objects known to Guppy, grouped together
(mathematically speaking,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Partition_of_a_set&quot;&gt;&lt;em&gt;partitioned&lt;/em&gt;&lt;/a&gt;) by
type&lt;sup&gt;&lt;a id=&quot;ref3&quot; href=&quot;#fn3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt; and sorted by how much space
they take up in memory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; heap = hp.heap()
&amp;gt;&amp;gt;&amp;gt; heap
Partition of a set of 45761 objects. Total size = 4699200 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0  15547  34  1494736  32   1494736  32 str
     1   8356  18   770272  16   2265008  48 tuple
     2    346   1   452080  10   2717088  58 dict (no owner)
     3  13685  30   328440   7   3045528  65 int
     4     71   0   221096   5   3266624  70 dict of module
     5   1652   4   211456   4   3478080  74 types.CodeType
     6    199   0   210856   4   3688936  79 dict of type
     7   1614   4   193680   4   3882616  83 function
     8    199   0   177008   4   4059624  86 type
     9    124   0   135328   3   4194952  89 dict of class
&amp;lt;91 more rows. Type e.g. &#39;_.more&#39; to view.&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This object (called an
&lt;a href=&quot;http://guppy-pe.sourceforge.net/heapy_UniSet.html#heapykinds.IdentitySet&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;IdentitySet&lt;/code&gt;&lt;/a&gt;)
looks bizarre, but it can be treated roughly like a list. If we want to take a
look at strings, we can do &lt;code class=&quot;highlighter-rouge&quot;&gt;heap[0]&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; heap[0]
Partition of a set of 22606 objects. Total size = 2049896 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0  22606 100  2049896 100   2049896 100 str&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This isn’t very useful, though. What we really want to do is re-partition this
subset using another relationship. There are a number of options, such as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; heap[0].byid  # Group by object ID; each subset therefore has one element
Set of 22606 &amp;lt;str&amp;gt; objects. Total size = 2049896 bytes.
 Index     Size   %   Cumulative  %   Representation (limited)
     0     7480   0.4      7480   0.4 &#39;The class Bi... copy of S.\n&#39;
     1     4872   0.2     12352   0.6 &quot;Support for ... &#39;error&#39;.\n\n&quot;
     2     4760   0.2     17112   0.8 &#39;Heap queues\...at Art! :-)\n&#39;
     3     4760   0.2     21872   1.1 &#39;Heap queues\...at Art! :-)\n&#39;
     4     3896   0.2     25768   1.3 &#39;This module ...ng function\n&#39;
     5     3824   0.2     29592   1.4 &#39;The type of ...call order.\n&#39;
     6     3088   0.2     32680   1.6 &#39;t\x00\x00|\x...x00|\x02\x00S&#39;
     7     2992   0.1     35672   1.7 &#39;HeapView(roo... size, etc.\n&#39;
     8     2808   0.1     38480   1.9 &#39;Directory tr...ories\n\n    &#39;
     9     2640   0.1     41120   2.0 &#39;The class No... otherwise.\n&#39;
&amp;lt;22596 more rows. Type e.g. &#39;_.more&#39; to view.&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; heap[0].byrcs  # Group by what types of objects reference the strings
Partition of a set of 22606 objects. Total size = 2049896 bytes.
 Index  Count   %     Size   % Cumulative  % Referrers by Kind (class / dict of class)
     0   6146  27   610752  30    610752  30 types.CodeType
     1   5304  23   563984  28   1174736  57 tuple
     2   4104  18   237536  12   1412272  69 dict (no owner)
     3   1959   9   139880   7   1552152  76 list
     4    564   2   136080   7   1688232  82 function, tuple
     5    809   4    97896   5   1786128  87 dict of module
     6    346   2    71760   4   1857888  91 dict of type
     7    365   2    19408   1   1877296  92 dict of module, tuple
     8    192   1    16176   1   1893472  92 dict (no owner), list
     9    232   1    11784   1   1905256  93 dict of class, function, tuple, types.CodeType
&amp;lt;229 more rows. Type e.g. &#39;_.more&#39; to view.&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; heap[0].byvia  # Group by how the strings are related to their referrers
Partition of a set of 22606 objects. Total size = 2049896 bytes.
 Index  Count   %     Size   % Cumulative  % Referred Via:
     0   2656  12   420456  21    420456  21 &#39;[0]&#39;
     1   2095   9   259008  13    679464  33 &#39;.co_code&#39;
     2   2095   9   249912  12    929376  45 &#39;.co_filename&#39;
     3    564   2   136080   7   1065456  52 &#39;.func_doc&#39;, &#39;[0]&#39;
     4    243   1   103528   5   1168984  57 &quot;[&#39;__doc__&#39;]&quot;
     5   1930   9   100584   5   1269568  62 &#39;.co_lnotab&#39;
     6    502   2    31128   2   1300696  63 &#39;[1]&#39;
     7    306   1    16272   1   1316968  64 &#39;[2]&#39;
     8    242   1    12960   1   1329928  65 &#39;[3]&#39;
     9    184   1     9872   0   1339800  65 &#39;[4]&#39;
&amp;lt;7323 more rows. Type e.g. &#39;_.more&#39; to view.&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From this, we can see that the plurality of memory devoted to strings is taken
up by those referenced by code objects (&lt;code class=&quot;highlighter-rouge&quot;&gt;types.CodeType&lt;/code&gt; represents
Python code—accessible from a non-C-defined function through
&lt;code class=&quot;highlighter-rouge&quot;&gt;func.func_code&lt;/code&gt;—and contains things like the names of its local variables and
the actual sequence of opcodes that make it up).&lt;/p&gt;

&lt;p&gt;For fun, let’s pick a random string.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import random
&amp;gt;&amp;gt;&amp;gt; obj = heap[0].byid[random.randrange(0, heap[0].count)]
&amp;gt;&amp;gt;&amp;gt; obj
Set of 1 &amp;lt;str&amp;gt; object. Total size = 176 bytes.
 Index     Size   %   Cumulative  %   Representation (limited)
     0      176 100.0       176 100.0 &#39;Define names...not listed.\n&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Interesting. Since this heap subset contains only one element, we can use
&lt;a href=&quot;http://guppy-pe.sourceforge.net/heapy_UniSet.html#heapykinds.IdentitySetSingleton.theone&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.theone&lt;/code&gt;&lt;/a&gt;
to get the actual object represented here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; obj.theone
&#39;Define names for all type symbols known in the standard interpreter.\n\nTypes that are part of optional modules (e.g. array) are not listed.\n&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looks like the docstring for the
&lt;a href=&quot;https://docs.python.org/2/library/types.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;types&lt;/code&gt;&lt;/a&gt; module. We can confirm
by using
&lt;a href=&quot;http://guppy-pe.sourceforge.net/heapy_UniSet.html#heapykinds.IdentitySet.referrers&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.referrers&lt;/code&gt;&lt;/a&gt;
to get the set of objects that refer to objects in the given set:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; obj.referrers
Partition of a set of 1 object. Total size = 3352 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0      1 100     3352 100      3352 100 dict of module&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is &lt;code class=&quot;highlighter-rouge&quot;&gt;types.__dict__&lt;/code&gt; (since the docstring we got is actually stored as
&lt;code class=&quot;highlighter-rouge&quot;&gt;types.__dict__[&quot;__doc__&quot;]&lt;/code&gt;), so if we use &lt;code class=&quot;highlighter-rouge&quot;&gt;.referrers&lt;/code&gt; again:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; obj.referrers.referrers
Partition of a set of 1 object. Total size = 56 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0      1 100       56 100        56 100 module
&amp;gt;&amp;gt;&amp;gt; obj.referrers.referrers.theone
&amp;lt;module &#39;types&#39; from &#39;/usr/local/Cellar/python/2.7.8_2/Frameworks/Python.framework/Versions/2.7/lib/python2.7/types.pyc&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; import types
&amp;gt;&amp;gt;&amp;gt; types.__doc__ is obj.theone
True&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;But why did we find an object in the &lt;code class=&quot;highlighter-rouge&quot;&gt;types&lt;/code&gt; module if we never imported it?&lt;/em&gt;
Well, let’s see. We can use
&lt;a href=&quot;http://guppy-pe.sourceforge.net/heapy_Use.html#heapykinds.Use.iso&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;hp.iso()&lt;/code&gt;&lt;/a&gt;
to get the Heapy set consisting of a single given object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; hp.iso(types)
Partition of a set of 1 object. Total size = 56 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0      1 100       56 100        56 100 module&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using a similar procedure as before, we see that &lt;code class=&quot;highlighter-rouge&quot;&gt;types&lt;/code&gt; is imported by the
&lt;a href=&quot;https://docs.python.org/2/library/traceback.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;traceback&lt;/code&gt;&lt;/a&gt; module:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; hp.iso(types).referrers
Partition of a set of 10 objects. Total size = 25632 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0      2  20    13616  53     13616  53 dict (no owner)
     1      5  50     9848  38     23464  92 dict of module
     2      1  10     1048   4     24512  96 dict of guppy.etc.Glue.Interface
     3      1  10     1048   4     25560 100 dict of guppy.etc.Glue.Share
     4      1  10       72   0     25632 100 tuple
&amp;gt;&amp;gt;&amp;gt; hp.iso(types).referrers[1].byid
Set of 5 &amp;lt;dict of module&amp;gt; objects. Total size = 9848 bytes.
 Index     Size   %   Cumulative  %   Owner Name
     0     3352  34.0      3352  34.0 traceback
     1     3352  34.0      6704  68.1 warnings
     2     1048  10.6      7752  78.7 __main__
     3     1048  10.6      8800  89.4 abc
     4     1048  10.6      9848 100.0 guppy.etc.Glue&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…and that is imported by
&lt;a href=&quot;https://docs.python.org/2/library/site.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import traceback
&amp;gt;&amp;gt;&amp;gt; hp.iso(traceback).referrers
Partition of a set of 3 objects. Total size = 15992 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0      1  33    12568  79     12568  79 dict (no owner)
     1      1  33     3352  21     15920 100 dict of module
     2      1  33       72   0     15992 100 tuple
&amp;gt;&amp;gt;&amp;gt; hp.iso(traceback).referrers[1].byid
Set of 1 &amp;lt;dict of module&amp;gt; object. Total size = 3352 bytes.
 Index     Size   %   Cumulative  %   Owner Name
     0     3352 100.0      3352 100.0 site&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Since &lt;code class=&quot;highlighter-rouge&quot;&gt;site&lt;/code&gt; is imported by Python on startup, we’ve figured out why objects
from &lt;code class=&quot;highlighter-rouge&quot;&gt;types&lt;/code&gt; exist, even though we’ve never used them.&lt;/p&gt;

&lt;p&gt;We’ve learned something important, too. When objects are stored as ordinary
attributes of a parent object (like &lt;code class=&quot;highlighter-rouge&quot;&gt;types.__doc__&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;traceback.types&lt;/code&gt;, and
&lt;code class=&quot;highlighter-rouge&quot;&gt;site.traceback&lt;/code&gt; from above), they are not referenced directly by the parent
object, but by that object’s &lt;code class=&quot;highlighter-rouge&quot;&gt;__dict__&lt;/code&gt; attribute. Therefore, if we want to
replace &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; is an attribute of &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;, we (probably) don’t need
to know anything special about &lt;code class=&quot;highlighter-rouge&quot;&gt;C&lt;/code&gt;—just how to modify dictionaries.&lt;/p&gt;

&lt;p&gt;A good Guppy/Heapy tutorial, while a bit old and incomplete, can be found on
&lt;a href=&quot;http://smira.ru/wp-content/uploads/2011/08/heapy.html&quot;&gt;Andrey Smirnov’s website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;examining-paths&quot;&gt;Examining paths&lt;/h2&gt;

&lt;p&gt;Let’s set up an example replacement using class instances:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Suppose we want to replace &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;. From the demo above, we know that we
can get the Heapy set of a single object using &lt;code class=&quot;highlighter-rouge&quot;&gt;hp.iso()&lt;/code&gt;. We also know we can
use &lt;code class=&quot;highlighter-rouge&quot;&gt;.referrers&lt;/code&gt; to get the set of objects that reference the given object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import guppy
&amp;gt;&amp;gt;&amp;gt; hp = guppy.hpy()
&amp;gt;&amp;gt;&amp;gt; print hp.iso(a).referrers
Partition of a set of 1 object. Total size = 1048 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0      1 100     1048 100      1048 100 dict of module&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is only referenced by one object, which makes sense, since we’ve only used
it in one place—as a local variable—meaning &lt;code class=&quot;highlighter-rouge&quot;&gt;hp.iso(a).referrers.theone&lt;/code&gt; must
be &lt;a href=&quot;https://docs.python.org/2/library/functions.html#locals&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;locals()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; hp.iso(a).referrers.theone is locals()
True&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, there is a more useful feature available to us:
&lt;a href=&quot;http://guppy-pe.sourceforge.net/heapy_UniSet.html#heapykinds.IdentitySet.pathsin&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.pathsin&lt;/code&gt;&lt;/a&gt;.
This also returns references to the given object, but instead of a Heapy set,
it is a list of &lt;code class=&quot;highlighter-rouge&quot;&gt;Path&lt;/code&gt; objects. These are more useful since they tell us not
only &lt;em&gt;what&lt;/em&gt; objects are related to the given object, but &lt;em&gt;how&lt;/em&gt; they are
related.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; print hp.iso(a).pathsin
 0: Src[&#39;a&#39;]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This looks very ambiguous. However, we find that we can extract the source of
the reference using &lt;code class=&quot;highlighter-rouge&quot;&gt;.src&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; path = hp.iso(a).pathsin[0]
&amp;gt;&amp;gt;&amp;gt; print path.src
Partition of a set of 1 object. Total size = 1048 bytes.
 Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)
     0      1 100     1048 100      1048 100 dict of module
&amp;gt;&amp;gt;&amp;gt; path.src.theone is locals()
True&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…and, we can examine the type of relation by looking at &lt;code class=&quot;highlighter-rouge&quot;&gt;.path[1]&lt;/code&gt; (the
actual reason for this isn’t worth getting into, due to Guppy’s lack of
documentation on the subject):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; relation = path.path[1]
&amp;gt;&amp;gt;&amp;gt; relation
&amp;lt;guppy.heapy.Path.Based_R_INDEXVAL object at 0x100f38230&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;relation&lt;/code&gt; is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Based_R_INDEXVAL&lt;/code&gt; object. Sounds bizarre, but
this tells us that &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is a particular indexed value of &lt;code class=&quot;highlighter-rouge&quot;&gt;path.src&lt;/code&gt;. What index?
We can get this using &lt;code class=&quot;highlighter-rouge&quot;&gt;relation.r&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; rel = relation.r
&amp;gt;&amp;gt;&amp;gt; print rel
a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ah ha! So now we know that &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is equal to the reference source (i.e.,
&lt;code class=&quot;highlighter-rouge&quot;&gt;path.src.theone&lt;/code&gt;) indexed by &lt;code class=&quot;highlighter-rouge&quot;&gt;rel&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; path.src.theone[rel] is a
True&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But &lt;code class=&quot;highlighter-rouge&quot;&gt;path.src.theone&lt;/code&gt; is just a dictionary, meaning we know how to modify it
very easily:&lt;sup&gt;&lt;a id=&quot;ref4&quot; href=&quot;#fn4&quot;&gt;[4]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; path.src.theone[rel] = b
&amp;gt;&amp;gt;&amp;gt; a
&amp;lt;__main__.B object at 0x100dae090&amp;gt;
&amp;gt;&amp;gt;&amp;gt; a is b
True&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bingo. We’ve successfully replaced &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, using a general method that
should work for any case where &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; is in a dictionary-like object.&lt;/p&gt;

&lt;h2 id=&quot;handling-different-reference-types&quot;&gt;Handling different reference types&lt;/h2&gt;

&lt;p&gt;We’ll continue by wrapping this code up in a nice function, which we will
expand as we go:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;guppy&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;guppy.heapy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guppy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathsin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_INDEXVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;dictionaries-lists-and-tuples&quot;&gt;Dictionaries, lists, and tuples&lt;/h3&gt;

&lt;p&gt;As noted above, this is versatile to handle many dictionary-like situations,
including &lt;code class=&quot;highlighter-rouge&quot;&gt;__dict__&lt;/code&gt;, which means we already know how to replace object
attributes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = A(), B()
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; class X(object):
...     pass
...
&amp;gt;&amp;gt;&amp;gt; X.cattr = a
&amp;gt;&amp;gt;&amp;gt; x = X()
&amp;gt;&amp;gt;&amp;gt; x.iattr = a
&amp;gt;&amp;gt;&amp;gt; d1 = {1: a}
&amp;gt;&amp;gt;&amp;gt; d2 = [{1: {0: (&quot;foo&quot;, &quot;bar&quot;, {&quot;a&quot;: a, &quot;b&quot;: b})}}]
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; replace(a, b)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print a
&amp;lt;__main__.B object at 0x1042b9910&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print X.cattr
&amp;lt;__main__.B object at 0x1042b9910&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print x.iattr
&amp;lt;__main__.B object at 0x1042b9910&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print d1[1]
&amp;lt;__main__.B object at 0x1042b9910&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print d2[0][1][0][2][&quot;a&quot;]
&amp;lt;__main__.B object at 0x1042b9910&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Lists can be handled exactly the same as dictionaries, although the keys in
this case (i.e., &lt;code class=&quot;highlighter-rouge&quot;&gt;relation.r&lt;/code&gt;) will always be integers.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = A(), B()
&amp;gt;&amp;gt;&amp;gt; L = [0, 1, 2, a, b]
&amp;gt;&amp;gt;&amp;gt; print L
[0, 1, 2, &amp;lt;__main__.A object at 0x104598950&amp;gt;, &amp;lt;__main__.B object at 0x104598910&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; replace(a, b)
&amp;gt;&amp;gt;&amp;gt; print L
[0, 1, 2, &amp;lt;__main__.B object at 0x104598910&amp;gt;, &amp;lt;__main__.B object at 0x104598910&amp;gt;]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Tuples are interesting. We can’t modify them directly because they’re
immutable, but we &lt;em&gt;can&lt;/em&gt; create a new tuple with the new value, and then replace
that tuple just like we replaced our original object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;        &lt;span class=&quot;c&quot;&gt;# Meanwhile, in replace()...&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_INDEXVAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theone&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As a result:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = A(), B()
&amp;gt;&amp;gt;&amp;gt; t1 = (0, 1, 2, a)
&amp;gt;&amp;gt;&amp;gt; t2 = (0, (1, (2, (3, (4, (5, (a,)))))))
&amp;gt;&amp;gt;&amp;gt; replace(a, b)
&amp;gt;&amp;gt;&amp;gt; print t1
(0, 1, 2, &amp;lt;__main__.B object at 0x104598e50&amp;gt;)
&amp;gt;&amp;gt;&amp;gt; print t2
(0, (1, (2, (3, (4, (5, (&amp;lt;__main__.B object at 0x104598e50&amp;gt;,)))))))&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;bound-methods&quot;&gt;Bound methods&lt;/h3&gt;

&lt;p&gt;Here’s a fun one. Let’s upgrade our definitions of &lt;code class=&quot;highlighter-rouge&quot;&gt;A&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;B&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After replacing &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;a.func&lt;/code&gt; no longer exists, as we’d expect:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = A(), B()
&amp;gt;&amp;gt;&amp;gt; a.func()
&amp;lt;__main__.A object at 0x10c4a5b10&amp;gt;
&amp;gt;&amp;gt;&amp;gt; replace(a, b)
&amp;gt;&amp;gt;&amp;gt; a.func()
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
AttributeError: &#39;B&#39; object has no attribute &#39;func&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But what if we save a reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;a.func&lt;/code&gt; before the replacement?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = A(), B()
&amp;gt;&amp;gt;&amp;gt; f = a.func
&amp;gt;&amp;gt;&amp;gt; replace(a, b)
&amp;gt;&amp;gt;&amp;gt; f()
&amp;lt;__main__.A object at 0x10c4b6090&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Hmm. So &lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; has kept a reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; somehow, but not in a dictionary-like
object. So where is it?&lt;/p&gt;

&lt;p&gt;Well, we can reveal it with the attribute &lt;code class=&quot;highlighter-rouge&quot;&gt;f.__self__&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; f.__self__
&amp;lt;__main__.A object at 0x10c4b6090&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Unfortunately, this attribute is magical and we can’t write to it directly:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; f.__self__ = b
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: readonly attribute&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Python clearly doesn’t want us to re-bind bound methods, and a reasonable
person would give up here, but we still have a few tricks up our sleeve. Let’s
examine the internal C structure of bound methods,
&lt;a href=&quot;https://github.com/python/cpython/blob/2.7/Include/classobject.h#L31&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PyMethodObject&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;svg width=&quot;559pt&quot; height=&quot;200pt&quot; viewbox=&quot;0.00 18.00 559.03 200.00&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 226)&quot;&gt;&lt;polygon fill=&quot;white&quot; stroke=&quot;none&quot; points=&quot;-4,4 -4,-226 555.032,-226 555.032,4 -4,4&quot; /&gt;&lt;g id=&quot;clust2&quot; class=&quot;cluster&quot;&gt;&lt;title&gt;cluster&lt;/title&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0&quot; points=&quot;8,-8 8,-214 272,-214 272,-8 8,-8&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;140&quot; y=&quot;-14.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;PyMethodObject&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;&lt;title&gt;obj&lt;/title&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;551.048,-110 336.984,-110 336.984,-74 551.048,-74 551.048,-110&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;444.016&quot; y=&quot;-89&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;10.00&quot;&gt;&amp;lt;__main__.A object at 0xdeadbeef&amp;gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;&lt;title&gt;struct&lt;/title&gt;&lt;polygon fill=&quot;#eeeeee&quot; stroke=&quot;none&quot; points=&quot;24,-182 24,-202 256,-202 256,-182 24,-182&quot; /&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-182 24,-202 256,-202 256,-182 24,-182&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-188.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;struct _object* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;161.422&quot; y=&quot;-188.8&quot; font-family=&quot;Courier,monospace&quot; font-style=&quot;oblique&quot; font-size=&quot;14.00&quot; fill=&quot;#666666&quot;&gt;_ob_next&lt;/text&gt;&lt;polygon fill=&quot;#eeeeee&quot; stroke=&quot;none&quot; points=&quot;24,-162 24,-182 256,-182 256,-162 24,-162&quot; /&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-162 24,-182 256,-182 256,-162 24,-162&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-168.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;struct _object* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;161.422&quot; y=&quot;-168.8&quot; font-family=&quot;Courier,monospace&quot; font-style=&quot;oblique&quot; font-size=&quot;14.00&quot; fill=&quot;#666666&quot;&gt;_ob_prev&lt;/text&gt;&lt;polygon fill=&quot;#eeeeee&quot; stroke=&quot;none&quot; points=&quot;24,-142 24,-162 256,-162 256,-142 24,-142&quot; /&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-142 24,-162 256,-162 256,-142 24,-142&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-148.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;Py_ssize_t &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;119.415&quot; y=&quot;-148.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;ob_refcnt&lt;/text&gt;&lt;polygon fill=&quot;#eeeeee&quot; stroke=&quot;none&quot; points=&quot;24,-122 24,-142 256,-142 256,-122 24,-122&quot; /&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-122 24,-142 256,-142 256,-122 24,-122&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;26.5815&quot; y=&quot;-128.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;struct _typeobject* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;194.609&quot; y=&quot;-128.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;ob_type&lt;/text&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-102 24,-122 256,-122 256,-102 24,-102&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-108.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;PyObject* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;111.014&quot; y=&quot;-108.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;im_func&lt;/text&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-82 24,-102 256,-102 256,-82 24,-82&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-88.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;PyObject* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;111.014&quot; y=&quot;-88.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;im_self&lt;/text&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-62 24,-82 256,-82 256,-62 24,-62&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-68.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;PyObject* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;111.014&quot; y=&quot;-68.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;im_class&lt;/text&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-42 24,-62 256,-62 256,-42 24,-42&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-48.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;PyObject* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;111.014&quot; y=&quot;-48.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;im_weakreflist&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;&lt;title&gt;struct:f&amp;#45;&amp;gt;obj&lt;/title&gt;&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; d=&quot;M257,-92C280.313,-92 305.269,-92 329.087,-92&quot; /&gt;&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;329.277,-94.6251 336.777,-92 329.277,-89.3751 329.277,-94.6251&quot; /&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;

&lt;p&gt;The four gray fields of the struct come from
&lt;a href=&quot;https://github.com/python/cpython/blob/2.7/Include/object.h#L78&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PyObject_HEAD&lt;/code&gt;&lt;/a&gt;,
which exist in all Python objects. The first two fields are from
&lt;a href=&quot;https://github.com/python/cpython/blob/2.7/Include/object.h#L66&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_PyObject_HEAD_EXTRA&lt;/code&gt;&lt;/a&gt;,
and only exist when the debugging macro &lt;code class=&quot;highlighter-rouge&quot;&gt;Py_TRACE_REFS&lt;/code&gt; is defined, in order to
support more advanced reference counting. We can see that the &lt;code class=&quot;highlighter-rouge&quot;&gt;im_self&lt;/code&gt; field,
which mantains the reference to our target object, is either forth or sixth in
the struct depending on &lt;code class=&quot;highlighter-rouge&quot;&gt;Py_TRACE_REFS&lt;/code&gt;. If we can figure out the size of the
field and its offset from the start of the struct, then we can set its value
directly using &lt;code class=&quot;highlighter-rouge&quot;&gt;ctypes.memmove()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;memmove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;id(f)&lt;/code&gt; is the memory location of our method, which refers to the start
of the C struct from above. &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; is the number of bytes between this memory
location and the start of the &lt;code class=&quot;highlighter-rouge&quot;&gt;im_self&lt;/code&gt; field. We use
&lt;a href=&quot;https://docs.python.org/2/library/ctypes.html#ctypes.byref&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctypes.byref()&lt;/code&gt;&lt;/a&gt;
to create a reference to the replacement object, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, which will be copied over
the existing reference to &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;. Finally, &lt;code class=&quot;highlighter-rouge&quot;&gt;field_size&lt;/code&gt; is the number of bytes
we’re copying, equal to the size of the &lt;code class=&quot;highlighter-rouge&quot;&gt;im_self&lt;/code&gt; field.&lt;/p&gt;

&lt;p&gt;Well, all but one of these fields are pointers to structure types, meaning they
have the same size,&lt;sup&gt;&lt;a id=&quot;ref5&quot; href=&quot;#fn5&quot;&gt;[5]&lt;/a&gt;&lt;/sup&gt; equal to
&lt;a href=&quot;https://docs.python.org/2/library/ctypes.html#ctypes.sizeof&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctypes.sizeof(ctypes.py_object)&lt;/code&gt;&lt;/a&gt;.
This is (probably) 4 or 8 bytes, depending on whether you’re on a 32-bit or a
64-bit system. The other field is a &lt;code class=&quot;highlighter-rouge&quot;&gt;Py_ssize_t&lt;/code&gt; object—possibly the same size
as the pointers, but we can’t be sure—which is equal to
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctypes.sizeof(ctypes.c_ssize_t)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We know that &lt;code class=&quot;highlighter-rouge&quot;&gt;field_size&lt;/code&gt; must be &lt;code class=&quot;highlighter-rouge&quot;&gt;ctypes.sizeof(ctypes.py_object)&lt;/code&gt;, since we
are copying a structure pointer. &lt;code class=&quot;highlighter-rouge&quot;&gt;offset&lt;/code&gt; is this value multiplied by the
number of structure pointers before &lt;code class=&quot;highlighter-rouge&quot;&gt;im_self&lt;/code&gt; (4 if &lt;code class=&quot;highlighter-rouge&quot;&gt;Py_TRACE_REFS&lt;/code&gt; is defined
and 2 otherwise), plus &lt;code class=&quot;highlighter-rouge&quot;&gt;ctypes.sizeof(ctypes.c_ssize_t)&lt;/code&gt; for &lt;code class=&quot;highlighter-rouge&quot;&gt;ob_type&lt;/code&gt;. But how
do we determine if &lt;code class=&quot;highlighter-rouge&quot;&gt;Py_TRACE_REFS&lt;/code&gt; is defined? We can’t check the value of a
macro at runtime, but we can check for the existence of
&lt;a href=&quot;https://github.com/python/cpython/blob/2.7/Misc/SpecialBuilds.txt#L54&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sys.getobjects()&lt;/code&gt;&lt;/a&gt;,
which is
&lt;a href=&quot;https://github.com/python/cpython/blob/2.7/Python/sysmodule.c#L951&quot;&gt;only defined when that macro is&lt;/a&gt;.
Therefore, we can make our replacement like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import ctypes
&amp;gt;&amp;gt;&amp;gt; import sys
&amp;gt;&amp;gt;&amp;gt; field_size = ctypes.sizeof(ctypes.py_object)
&amp;gt;&amp;gt;&amp;gt; ptrs_in_struct = 4 if hasattr(sys, &quot;getobjects&quot;) else 2
&amp;gt;&amp;gt;&amp;gt; offset = ptrs_in_struct * field_size + ctypes.sizeof(ctypes.c_ssize_t)
&amp;gt;&amp;gt;&amp;gt; ctypes.memmove(id(f) + offset, ctypes.byref(ctypes.py_object(b)), field_size)
4470258440
&amp;gt;&amp;gt;&amp;gt; f.__self__ is b
True
&amp;gt;&amp;gt;&amp;gt; f()
&amp;lt;__main__.B object at 0x10a8af290&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Excellent—it worked!&lt;/p&gt;

&lt;p&gt;There’s another kind of bound method, which is the built-in variety as opposed
to the user-defined variety we saw above. An example is &lt;code class=&quot;highlighter-rouge&quot;&gt;a.__sizeof__()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = A(), B()
&amp;gt;&amp;gt;&amp;gt; f = a.__sizeof__
&amp;gt;&amp;gt;&amp;gt; f
&amp;lt;built-in method __sizeof__ of A object at 0x10ab44b50&amp;gt;
&amp;gt;&amp;gt;&amp;gt; replace(a, b)
&amp;gt;&amp;gt;&amp;gt; f.__self__
&amp;lt;__main__.A object at 0x10ab44b50&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is stored internally as a
&lt;a href=&quot;https://github.com/python/cpython/blob/2.7/Include/methodobject.h#L81&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PyCFunctionObject&lt;/code&gt;&lt;/a&gt;.
Let’s take a look at its layout:&lt;/p&gt;

&lt;svg width=&quot;559pt&quot; height=&quot;180pt&quot; viewbox=&quot;0.00 18.00 559.03 180.00&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;&gt;&lt;g id=&quot;graph0&quot; class=&quot;graph&quot; transform=&quot;scale(1 1) rotate(0) translate(4 206)&quot;&gt;&lt;polygon fill=&quot;white&quot; stroke=&quot;none&quot; points=&quot;-4,4 -4,-206 555.032,-206 555.032,4 -4,4&quot; /&gt;&lt;g id=&quot;clust2&quot; class=&quot;cluster&quot;&gt;&lt;title&gt;cluster&lt;/title&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0&quot; points=&quot;8,-8 8,-194 272,-194 272,-8 8,-8&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;140&quot; y=&quot;-14.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;PyCFunctionObject&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node1&quot; class=&quot;node&quot;&gt;&lt;title&gt;obj&lt;/title&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;551.048,-90 336.984,-90 336.984,-54 551.048,-54 551.048,-90&quot; /&gt;&lt;text text-anchor=&quot;middle&quot; x=&quot;444.016&quot; y=&quot;-69&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;10.00&quot;&gt;&amp;lt;__main__.A object at 0xdeadbeef&amp;gt;&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;node2&quot; class=&quot;node&quot;&gt;&lt;title&gt;struct&lt;/title&gt;&lt;polygon fill=&quot;#eeeeee&quot; stroke=&quot;none&quot; points=&quot;24,-162 24,-182 256,-182 256,-162 24,-162&quot; /&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-162 24,-182 256,-182 256,-162 24,-162&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-168.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;struct _object* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;161.422&quot; y=&quot;-168.8&quot; font-family=&quot;Courier,monospace&quot; font-style=&quot;oblique&quot; font-size=&quot;14.00&quot; fill=&quot;#666666&quot;&gt;_ob_next&lt;/text&gt;&lt;polygon fill=&quot;#eeeeee&quot; stroke=&quot;none&quot; points=&quot;24,-142 24,-162 256,-162 256,-142 24,-142&quot; /&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-142 24,-162 256,-162 256,-142 24,-142&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-148.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;struct _object* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;161.422&quot; y=&quot;-148.8&quot; font-family=&quot;Courier,monospace&quot; font-style=&quot;oblique&quot; font-size=&quot;14.00&quot; fill=&quot;#666666&quot;&gt;_ob_prev&lt;/text&gt;&lt;polygon fill=&quot;#eeeeee&quot; stroke=&quot;none&quot; points=&quot;24,-122 24,-142 256,-142 256,-122 24,-122&quot; /&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-122 24,-142 256,-142 256,-122 24,-122&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-128.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;Py_ssize_t &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;119.415&quot; y=&quot;-128.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;ob_refcnt&lt;/text&gt;&lt;polygon fill=&quot;#eeeeee&quot; stroke=&quot;none&quot; points=&quot;24,-102 24,-122 256,-122 256,-102 24,-102&quot; /&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-102 24,-122 256,-122 256,-102 24,-102&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;26.5815&quot; y=&quot;-108.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;struct _typeobject* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;194.609&quot; y=&quot;-108.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;ob_type&lt;/text&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-82 24,-102 256,-102 256,-82 24,-82&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-88.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;PyMethodDef* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;136.218&quot; y=&quot;-88.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;m_ml&lt;/text&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-62 24,-82 256,-82 256,-62 24,-62&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-68.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;PyObject* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;111.014&quot; y=&quot;-68.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;m_self&lt;/text&gt;&lt;polygon fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;24,-42 24,-62 256,-62 256,-42 24,-42&quot; /&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;27&quot; y=&quot;-48.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot; fill=&quot;#888888&quot;&gt;PyObject* &lt;/text&gt;&lt;text text-anchor=&quot;start&quot; x=&quot;111.014&quot; y=&quot;-48.8&quot; font-family=&quot;Courier,monospace&quot; font-size=&quot;14.00&quot;&gt;m_module&lt;/text&gt;&lt;/g&gt;&lt;g id=&quot;edge1&quot; class=&quot;edge&quot;&gt;&lt;title&gt;struct:f&amp;#45;&amp;gt;obj&lt;/title&gt;&lt;path fill=&quot;none&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; d=&quot;M257,-72C280.313,-72 305.269,-72 329.087,-72&quot; /&gt;&lt;polygon fill=&quot;black&quot; stroke=&quot;black&quot; stroke-width=&quot;0.5&quot; points=&quot;329.277,-74.6251 336.777,-72 329.277,-69.3751 329.277,-74.6251&quot; /&gt;&lt;/g&gt;&lt;/g&gt;&lt;/svg&gt;

&lt;p&gt;Fortunately, &lt;code class=&quot;highlighter-rouge&quot;&gt;m_self&lt;/code&gt; here has the same offset as &lt;code class=&quot;highlighter-rouge&quot;&gt;im_self&lt;/code&gt; from before, so we
can just use the same code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; ctypes.memmove(id(f) + offset, ctypes.byref(ctypes.py_object(b)), field_size)
4474703768
&amp;gt;&amp;gt;&amp;gt; f.__self__ is b
True
&amp;gt;&amp;gt;&amp;gt; f
&amp;lt;built-in method __sizeof__ of B object at 0x10ab4f150&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;dictionary-keys&quot;&gt;Dictionary keys&lt;/h3&gt;

&lt;p&gt;Dictionary keys have a different reference relation type than values, but the
replacement works mostly the same way. We pop the value of the old key from the
dictionary, and then insert it in again under the new key. Here’s the code,
which we’ll stick into the main block in &lt;code class=&quot;highlighter-rouge&quot;&gt;replace()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_INDEXKEY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theone&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And, a demonstration:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = A(), B()
&amp;gt;&amp;gt;&amp;gt; d = {a: 1}
&amp;gt;&amp;gt;&amp;gt; replace(a, b)
&amp;gt;&amp;gt;&amp;gt; d
{&amp;lt;__main__.B object at 0x10fb47950&amp;gt;: 1}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;closure-cells&quot;&gt;Closure cells&lt;/h3&gt;

&lt;p&gt;We’ll cover just one more case, this time involving a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Closure_(computer_programming)&quot;&gt;closure&lt;/a&gt;. Here’s
our test function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inner&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inner&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we can see, an instance of the inner function keeps references to the locals
of the wrapper function, even after using our current
version of &lt;code class=&quot;highlighter-rouge&quot;&gt;replace()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; a, b = A(), B()
&amp;gt;&amp;gt;&amp;gt; f = wrapper(a)
&amp;gt;&amp;gt;&amp;gt; f()
&amp;lt;__main__.A object at 0x109446090&amp;gt;
&amp;gt;&amp;gt;&amp;gt; replace(a, b)
&amp;gt;&amp;gt;&amp;gt; f()
&amp;lt;__main__.A object at 0x109446090&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Internally, CPython implements this using things called
&lt;a href=&quot;https://docs.python.org/2/c-api/cell.html&quot;&gt;&lt;em&gt;cells&lt;/em&gt;&lt;/a&gt;. We notice that
&lt;code class=&quot;highlighter-rouge&quot;&gt;f.func_closure&lt;/code&gt; gives us a tuple of &lt;code class=&quot;highlighter-rouge&quot;&gt;cell&lt;/code&gt; objects, and we can examine an
individual cell’s contents with &lt;code class=&quot;highlighter-rouge&quot;&gt;.cell_contents&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; f.func_closure
(&amp;lt;cell at 0x10ad9f478: instance object at 0x109446090&amp;gt;,)
&amp;gt;&amp;gt;&amp;gt; f.func_closure[0].cell_contents
&amp;lt;__main__.A object at 0x109446090&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As expected, we can’t just modify it…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; f.func_closure[0].cell_contents = b
Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
AttributeError: attribute &#39;cell_contents&#39; of &#39;cell&#39; objects is not writable&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…because that would be too easy. So, how can we replace it? Well, we could
go back to &lt;code class=&quot;highlighter-rouge&quot;&gt;memmove&lt;/code&gt;, but there’s an easier way thanks to the &lt;code class=&quot;highlighter-rouge&quot;&gt;ctypes&lt;/code&gt; module
also exposing Python’s C API. Specifically, the
&lt;a href=&quot;https://docs.python.org/2/c-api/cell.html#c.PyCell_Set&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PyCell_Set&lt;/code&gt;&lt;/a&gt; function
(which seems to lack a pure Python equivalent) does exactly what we want. Since
the function expects &lt;code class=&quot;highlighter-rouge&quot;&gt;PyObject*&lt;/code&gt;s as arguments, we’ll need to use
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctypes.py_object&lt;/code&gt; as a wrapper. Here it is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; from ctypes import py_object, pythonapi
&amp;gt;&amp;gt;&amp;gt; pythonapi.PyCell_Set(py_object(f.func_closure[0]), py_object(b))
0
&amp;gt;&amp;gt;&amp;gt; f()
&amp;lt;__main__.B object at 0x10ad94dd0&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Perfect – the replacement worked. To tie it together with &lt;code class=&quot;highlighter-rouge&quot;&gt;replace()&lt;/code&gt;, we’ll
note that Guppy represents the cell contents relationship with
&lt;code class=&quot;highlighter-rouge&quot;&gt;Based_R_INTERATTR&lt;/code&gt;, for what I assume to be “internal attribute”. We can use
this to find the cell object within the inner function that references our
target object, and then use the method above to make the change:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;relation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R_INTERATTR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;isinstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CellType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pythonapi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PyCell_Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;py_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;py_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;other-cases&quot;&gt;Other cases&lt;/h3&gt;

&lt;p&gt;There are many, many more types of possible replacements. I’ve written a more
extensible version of &lt;code class=&quot;highlighter-rouge&quot;&gt;replace()&lt;/code&gt; with some test cases, which can be viewed
on Gist &lt;a href=&quot;https://gist.github.com/earwig/28a64ffb94d51a608e3d&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Certainly, not every case is handled by it, but it seems to cover the majority
that I’ve found through testing. There are a number of reference relations in
Guppy that I couldn’t figure out how to replicate without doing something
insane (&lt;code class=&quot;highlighter-rouge&quot;&gt;R_HASATTR&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;R_CELL&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;R_STACK&lt;/code&gt;), so some obscure replacements are
likely unimplemented.&lt;/p&gt;

&lt;p&gt;Some other kinds of replacements are known, but impossible. For example,
replacing a class object that uses &lt;code class=&quot;highlighter-rouge&quot;&gt;__slots__&lt;/code&gt; with another class will not work
if the replacement class has a different slot layout and instances of the old
class exist. More generally, replacing a class with a non-class object won’t
work if instances of the class exist. Furthermore, references stored in data
structures managed by C extensions cannot be changed, since there’s no good way
for us to track these.&lt;/p&gt;

&lt;h2 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a id=&quot;fn1&quot; href=&quot;#ref1&quot;&gt;^&lt;/a&gt; This post relies &lt;em&gt;heavily&lt;/em&gt; on implementation
details of CPython 2.7. While it could be adapted for Python 3 by examining
changes to the internal structures of objects that we used above, that would
be a lost cause if you wanted to replicate this on
&lt;a href=&quot;http://www.jython.org/&quot;&gt;Jython&lt;/a&gt; or some other implementation. We are so
dependent on concepts specific to CPython that you would need to start from
scratch, beginning with a language-specific replacement for Guppy.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a id=&quot;fn2&quot; href=&quot;#ref2&quot;&gt;^&lt;/a&gt; The
&lt;a href=&quot;https://en.wikipedia.org/wiki/DOT_(graph_description_language)&quot;&gt;DOT files&lt;/a&gt;
used to generate graphs in this post are
&lt;a href=&quot;https://gist.github.com/earwig/edc13f04f871c110eea6&quot;&gt;available on Gist&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a id=&quot;fn3&quot; href=&quot;#ref3&quot;&gt;^&lt;/a&gt; They’re actually grouped together by &lt;em&gt;clodo&lt;/em&gt;
(“class or dict object”), which is similar to type, but groups &lt;code class=&quot;highlighter-rouge&quot;&gt;__dict__&lt;/code&gt;s
separately by their owner’s type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a id=&quot;fn4&quot; href=&quot;#ref4&quot;&gt;^&lt;/a&gt; Python’s documentation tells us not to modify
the locals dictionary, but screw that; we’re gonna do it anyway.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a id=&quot;fn5&quot; href=&quot;#ref5&quot;&gt;^&lt;/a&gt; According to the
&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1256.pdf&quot;&gt;C99&lt;/a&gt; and
&lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf&quot;&gt;C11 standards&lt;/a&gt;;
section 6.2.5.27 in the former and 6.2.5.28 in the latter: “All pointers to
structure types shall have the same representation and alignment
requirements as each other.”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</content>
        </entry>
    
        <entry>
            <id>https://byetimes.com/2014/08/20/copyvio-detector</id>
            <title>Copyvio Detector</title>
            <updated>2014-08-20T00:00:00+08:00</updated>
            <published>2014-08-20T00:00:00+08:00</published>
            <link rel="alternate" type="text/html" href="/2014/08/20/copyvio-detector.html"/>
            <author>
                <name>Ben Kurtovic</name>
                <email>ben.kurtovic@gmail.com</email>
                <uri>https://benkurtovic.com/</uri>
            </author>
            <summary>A technical writeup of some recent developments</summary>
            <content type="html">&lt;p&gt;This is an technical writeup of some recent developments involving the
&lt;a href=&quot;//en.wikipedia.org/wiki/WP:COPYVIO&quot;&gt;copyright violation&lt;/a&gt; detector for
Wikipedia articles that I maintain, located at
&lt;a href=&quot;//tools.wmflabs.org/copyvios&quot;&gt;tools.wmflabs.org/copyvios&lt;/a&gt;. Its source code is
available on &lt;a href=&quot;//github.com/earwig/copyvios&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dealing-with-sources&quot;&gt;Dealing with sources&lt;/h2&gt;

&lt;p&gt;Of course, the central component of the detector is finding and parsing
potential sources of copyright violations. These sources are obtained through
two methods: investigating external links found in the article, and searching
for article content elsewhere on the web using a search engine
(&lt;a href=&quot;//developer.yahoo.com/boss/search/&quot;&gt;Yahoo! BOSS&lt;/a&gt;, paid for by the Wikimedia
Foundation).&lt;/p&gt;

&lt;p&gt;To use the search engine, we must first break the article text up into plain
text search queries, or “chunks”. This involves some help from
&lt;a href=&quot;//github.com/earwig/mwparserfromhell&quot;&gt;mwparserfromhell&lt;/a&gt;, which is used to
strip out non-text wikicode from the article, and the &lt;a href=&quot;http://www.nltk.org/&quot;&gt;Python Natural Language
Toolkit&lt;/a&gt;, which is then used to split this up into
sentences, of which we select a few medium-sized ones to search for.
mwparserfromhell is also used to extract the external links.&lt;/p&gt;

&lt;p&gt;Sources are fetched and then parsed differently depending on the document type
(HTML is handled by
&lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/&quot;&gt;beautifulsoup&lt;/a&gt;, PDFs are
handled by &lt;a href=&quot;http://www.unixuser.org/~euske/python/pdfminer/&quot;&gt;pdfminer&lt;/a&gt;), and
normalized to a plain text form. We then create multiple
&lt;a href=&quot;https://en.wikipedia.org/wiki/Markov_chain&quot;&gt;Markov chains&lt;/a&gt; – the &lt;em&gt;article
chain&lt;/em&gt; is built from word &lt;a href=&quot;https://en.wikipedia.org/wiki/N-gram&quot;&gt;5-grams&lt;/a&gt; from
the article text, and a &lt;em&gt;source chain&lt;/em&gt; is built from each source text. A &lt;em&gt;delta
chain&lt;/em&gt; is created for each source chain, representing the intersection of it
and the article chain by examining which nodes are shared.&lt;/p&gt;

&lt;p&gt;But how do we use these chains to decide whether a violation is present?&lt;/p&gt;

&lt;h2 id=&quot;determining-violation-confidence&quot;&gt;Determining violation confidence&lt;/h2&gt;

&lt;p&gt;One of the most nuanced aspects of the detector is figuring out the likelihood
that a given article is a violation of a given source. We call this number, a
value between 0 and 1, the “confidence” of a violation. Values between 0 and
0.4 indicate no violation (green background in results page), between 0.4 and
0.75 a “possible” violation (yellow background), and between 0.75 and 1 a
“suspected” violation (red background).&lt;/p&gt;

&lt;p&gt;To calculate the confidence of a violation, the copyvio detector uses the
maximum value of two functions, one of which accounts for the size of the delta
chain (&lt;span&gt;\(\Delta\)&lt;/span&gt;) in relation to the article chain
(&lt;span&gt;\(A\)&lt;/span&gt;), and the other of which accounts for just the size of
&lt;span&gt;\(\Delta\)&lt;/span&gt;. This ensures a high confidence value when both
chains are small, but not when &lt;span&gt;\(A\)&lt;/span&gt; is significantly larger
than &lt;span&gt;\(\Delta\)&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The article–delta confidence function, &lt;span&gt;\(C_{A\Delta}\)&lt;/span&gt;, is
piecewise-defined such that confidence increases at an exponential rate as
&lt;span&gt;\(\frac{\Delta}{A}\)&lt;/span&gt; increases, until the value of
&lt;span&gt;\(C_{A\Delta}\)&lt;/span&gt; reaches the “suspected” violation threshold, at
which point confidence increases at a decreasing rate, with
&lt;span&gt;\(\lim_{\frac{\Delta}{A} \to 1}C_{A\Delta}(A, \Delta)=1\)&lt;/span&gt;
holding true. The exact coefficients used are shown below:&lt;/p&gt;

&lt;div&gt;$$C_{A\Delta}(A, \Delta)=\begin{cases} -\ln(1-\frac{\Delta}{A}) &amp;amp;
\frac{\Delta}{A} \le 0.52763 \\[0.5em]
-0.8939(\frac{\Delta}{A})^2+1.8948\frac{\Delta}{A}-0.0009 &amp;amp;
\frac{\Delta}{A} \gt 0.52763 \end{cases}$$&lt;/div&gt;

&lt;p&gt;A graph can be viewed
&lt;a href=&quot;/static/content/copyvio-detector/article-delta_confidence_function.pdf&quot;&gt;here&lt;/a&gt;,
with the x-axis indicating &lt;span&gt;\(\frac{\Delta}{A}\)&lt;/span&gt; and the y-axis
indicating confidence. The background is colored red, yellow, and green when a
violation is considered suspected, possible, or not present, respectively.&lt;/p&gt;

&lt;p&gt;The delta confidence function, &lt;span&gt;\(C_{\Delta}\)&lt;/span&gt;, is also
piecewise-defined. A number of confidence values were derived experimentally,
and the function was extrapolated from there such that
&lt;span&gt;\(\lim_{Δ \to +\infty}C_{\Delta}(\Delta)=1\)&lt;/span&gt;. The reference
points were &lt;span&gt;\(\{(0, 0), (100, 0.5), (250, 0.75), (500, 0.9),
(1000, 0.95)\}\)&lt;/span&gt;. The function is defined as follows:&lt;/p&gt;

&lt;div&gt;$$C_{\Delta}(\Delta)=\begin{cases} \frac{\Delta}{\Delta+100} &amp;amp; \Delta\leq
100 \\[0.5em] \frac{\Delta-25}{\Delta+50} &amp;amp;  100\lt \Delta\leq 250\; \\[0.5em]
\frac{10.5\Delta-750}{10\Delta} &amp;amp; 250\lt \Delta\leq 500\; \\[0.5em]
\frac{\Delta-50}{\Delta} &amp;amp; \Delta\gt500 \end{cases}$$&lt;/div&gt;

&lt;p&gt;A graph can be viewed
&lt;a href=&quot;/static/content/copyvio-detector/delta_confidence_function.pdf&quot;&gt;here&lt;/a&gt;, with
the x-axis indicating &lt;span&gt;\(\Delta\)&lt;/span&gt;. The background coloring is the
same as before.&lt;/p&gt;

&lt;p&gt;Now that we have these two definitions, we can define the primary confidence
function, &lt;span&gt;\(C\)&lt;/span&gt;, as follows:&lt;/p&gt;

&lt;div&gt;$$C(A, \Delta) = \max(C_{A\Delta}(A, \Delta), C_{\Delta}(\Delta))$$&lt;/div&gt;

&lt;p&gt;By feeding &lt;span&gt;\(A\)&lt;/span&gt; and &lt;span&gt;\(\Delta\)&lt;/span&gt; into
&lt;span&gt;\(C\)&lt;/span&gt;, we get our final confidence value.&lt;/p&gt;

&lt;h2 id=&quot;multithreaded-worker-model&quot;&gt;Multithreaded worker model&lt;/h2&gt;

&lt;p&gt;At a high level, the detector needs to be able to rapidly handle a lot of
requests at the same time, but without falling victim to denial-of-service
attacks. Since the tool needs to download many webpages very quickly, it is
vulnerable to abuse if the same request is repeated many times without delay.
Therefore, all requests made to the tool share the same set of persistent
worker subprocesses, referred to as &lt;em&gt;global worker&lt;/em&gt; mode. However, the
underlying detection machinery in earwigbot also supports a &lt;em&gt;local worker&lt;/em&gt;
mode, which spawns individual workers for each copyvio check so that idle
processes aren’t kept running all the time.&lt;/p&gt;

&lt;p&gt;But how do these workers handle fetching URLs? The “safe” solution is to only
handle one URL at a time per request, but this is too slow when twenty-five
pages need to be checked in a few seconds – one single slow website will cause
a huge delay. The detector’s solution is to keep unprocessed URLs in
site-specific queues, so that at any given point, only one worker is handling
URLs for a particular domain. This way, no individual website is overloaded by
simultaneous requests, but the copyvio check as a whole is completed quickly.&lt;/p&gt;

&lt;p&gt;Other features enable efficiency: copyvio check results are cached for a period
of time so that the Foundation doesn’t have to pay Yahoo! for the same
information multiple times; and if a possible source is found to have a
confidence value within the “suspected violation” range, yet-to-be-processed
URLs are skipped and the check short-circuits.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <id>https://byetimes.com/2014/06/01/obfuscating-hello-world</id>
            <title>Obfuscating &quot;Hello world!&quot;</title>
            <updated>2014-06-01T00:00:00+08:00</updated>
            <published>2014-06-01T00:00:00+08:00</published>
            <link rel="alternate" type="text/html" href="/2014/06/01/obfuscating-hello-world.html"/>
            <author>
                <name>Ben Kurtovic</name>
                <email>ben.kurtovic@gmail.com</email>
                <uri>https://benkurtovic.com/</uri>
            </author>
            <summary>Fun with functional programming in Python</summary>
            <content type="html">&lt;p&gt;A few months ago, I got first place in
&lt;a href=&quot;//codegolf.stackexchange.com/q/22533&quot;&gt;this Code Golf contest&lt;/a&gt; to create the
weirdest obfuscated program that prints the string “Hello world!”. I decided to
write up an explanation of how the hell it works. So, here’s the entry, in
Python 2.7:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;__import__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_lnotab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_nlocals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_nlocals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_argcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;String literals weren’t allowed, but I set some other restrictions for fun: it
had to be a single expression (so no &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; statement) with minimal builtin
usage and no integer literals.&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;

&lt;p&gt;Since we can’t use &lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt;, we can write to the &lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt; file object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;But let’s use something lower-level:
&lt;a href=&quot;//docs.python.org/2/library/os.html#os.write&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;os.write()&lt;/code&gt;&lt;/a&gt;. We need
&lt;code class=&quot;highlighter-rouge&quot;&gt;stdout&lt;/code&gt;’s &lt;a href=&quot;//en.wikipedia.org/wiki/File_descriptor&quot;&gt;file descriptor&lt;/a&gt;, which is
&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; (you can check with &lt;code class=&quot;highlighter-rouge&quot;&gt;print sys.stdout.fileno()&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We want a single expression, so we’ll use
&lt;a href=&quot;//docs.python.org/2/library/functions.html#__import__&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;__import__()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;__import__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We also want to be able to obfuscate the &lt;code class=&quot;highlighter-rouge&quot;&gt;write()&lt;/code&gt;, so we’ll throw in a
&lt;code class=&quot;highlighter-rouge&quot;&gt;getattr()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;__import__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;os&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;write&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is the starting point. Everything from now on will be obfuscating the
three strings and the int.&lt;/p&gt;

&lt;h2 id=&quot;stringing-together-strings&quot;&gt;Stringing together strings&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;os&quot;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;write&quot;&lt;/code&gt; are fairly simple, so we’ll create them by joining parts
of the names of various built-in classes. There are many different ways to do
this, but I chose the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;o&quot;&lt;/code&gt; from the second letter of &lt;code class=&quot;highlighter-rouge&quot;&gt;bool&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;True.__class__.__name__[1]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;s&quot;&lt;/code&gt; from the third letter of &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;[].__class__.__name__[2]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;wr&quot;&lt;/code&gt; from the first two letters of &lt;code class=&quot;highlighter-rouge&quot;&gt;wrapper_descriptor&lt;/code&gt;, an implementation
detail in CPython found as the type of some builtin classes’ methods (more on
that
&lt;a href=&quot;http://utcc.utoronto.ca/~cks/space/blog/python/SlotWrapperObjects&quot;&gt;here&lt;/a&gt;):
&lt;code class=&quot;highlighter-rouge&quot;&gt;().__class__.__eq__.__class__.__name__[:2]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;ite&quot;&lt;/code&gt; from the sixth through eighth letters of &lt;code class=&quot;highlighter-rouge&quot;&gt;tupleiterator&lt;/code&gt;, the type of
object returned by calling &lt;code class=&quot;highlighter-rouge&quot;&gt;iter()&lt;/code&gt; on a tuple:
&lt;code class=&quot;highlighter-rouge&quot;&gt;().__iter__().__class__.__name__[5:8]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re starting to make some progress!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;__import__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;Hello world!\n&quot;&lt;/code&gt; is more complicated. We’re going to encode it as a big
integer, which will be formed of the ASCII code of each character multiplied by
256 to the power of the character’s index in the string. In other words, the
following sum:&lt;/p&gt;

&lt;div&gt;$$\sum_{n=0}^{L-1} c_n(256^n)$$&lt;/div&gt;

&lt;p&gt;where &lt;span&gt;\(L\)&lt;/span&gt; is the length of the string and
&lt;span&gt;\(c_n\)&lt;/span&gt; is the ASCII code of the
&lt;span&gt;\(n\)&lt;/span&gt;&lt;sup&gt;th&lt;/sup&gt; character in the string. To create the
number:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; codes = [ord(c) for c in &quot;Hello world!\n&quot;]
&amp;gt;&amp;gt;&amp;gt; num = sum(codes[i] * 256 ** i for i in xrange(len(codes)))
&amp;gt;&amp;gt;&amp;gt; print num
802616035175250124568770929992&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we need the code to convert this number back into a string. We use a simple
recursive algorithm:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; def convert(num):
...     if num:
...         return chr(num % 256) + convert(num // 256)
...     else:
...         return &quot;&quot;
...
&amp;gt;&amp;gt;&amp;gt; convert(802616035175250124568770929992)
&#39;Hello world!\n&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Rewriting in one line with &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we use
&lt;a href=&quot;//en.wikipedia.org/wiki/Anonymous_recursion&quot;&gt;anonymous recursion&lt;/a&gt; to turn this
into a single expression. This requires a
&lt;a href=&quot;//en.wikipedia.org/wiki/Combinatory_logic&quot;&gt;combinator&lt;/a&gt;. Start with this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; comb = lambda f, n: f(f, n)
&amp;gt;&amp;gt;&amp;gt; convert = lambda f, n: chr(n % 256) + f(f, n // 256) if n else &quot;&quot;
&amp;gt;&amp;gt;&amp;gt; comb(convert, 802616035175250124568770929992)
&#39;Hello world!\n&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we just substitute the two definitions into the expression, and we have our
function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (lambda f, n: f(f, n))(
...     lambda f, n: chr(n % 256) + f(f, n // 256) if n else &quot;&quot;,
...     802616035175250124568770929992)
&#39;Hello world!\n&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can stick this into our code from before, replacing some variable names
along the way (&lt;code class=&quot;highlighter-rouge&quot;&gt;f&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;__&lt;/code&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;__import__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;802616035175250124568770929992&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;function-internals&quot;&gt;Function internals&lt;/h2&gt;

&lt;p&gt;We’re left with a &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&quot;&lt;/code&gt; in the body of our convert function (remember: no string
literals!), and a large number that we’ll have to hide somehow. Let’s start
with the empty string. We can make one on the fly by examining the internals of
some random function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (lambda: 0).func_code.co_lnotab
&#39;&#39;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What we’re &lt;em&gt;really&lt;/em&gt; doing here is looking at the
&lt;a href=&quot;http://svn.python.org/projects/python/branches/pep-0384/Objects/lnotab_notes.txt&quot;&gt;line number table&lt;/a&gt;
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; object contained within the function. Since it’s anonymous, there
are no line numbers, so the string is empty. Replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; to make
it more confusing (it doesn’t matter, since the function’s not being called),
and stick it in. We’ll also refactor out the &lt;code class=&quot;highlighter-rouge&quot;&gt;256&lt;/code&gt; into an argument that gets
passed to our obfuscated &lt;code class=&quot;highlighter-rouge&quot;&gt;convert()&lt;/code&gt; along with the number. This requires
adding an argument to the combinator:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;__import__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_lnotab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;802616035175250124568770929992&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;a-detour&quot;&gt;A detour&lt;/h2&gt;

&lt;p&gt;Let’s tackle a different problem for a bit. We want a way to obfuscate the
numbers in our code, but it’ll be cumbersome (and not particularly interesting)
to recreate them each time they’re used. If we can implement, say,
&lt;code class=&quot;highlighter-rouge&quot;&gt;range(1, 9) == [1, 2, 3, 4, 5, 6, 7, 8]&lt;/code&gt;, then we can wrap our current work in
a function that takes variables containing the numbers from 1 to 8, and replace
occurrences of integer literals in the body with these variables:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;__import__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even though we need to form &lt;code class=&quot;highlighter-rouge&quot;&gt;256&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;802616035175250124568770929992&lt;/code&gt; as well,
these can be created using arithmetic operations on these eight “fundamental”
numbers. The choice of 1–8 is arbitrary, but seems to be a good middle ground.&lt;/p&gt;

&lt;p&gt;We can get the number of arguments a function takes via its &lt;code class=&quot;highlighter-rouge&quot;&gt;code&lt;/code&gt; object:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (lambda a, b, c: 0).func_code.co_argcount
3&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Build a tuple of functions with argcounts between 1 and 8:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;funcs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using a recursive algorithm, we can turn this into the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;range(1, 9)&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; def convert(L):
...     if L:
...         return [L[0].func_code.co_argcount] + convert(L[1:])
...     else:
...         return []
...
&amp;gt;&amp;gt;&amp;gt; convert(funcs)
[1, 2, 3, 4, 5, 6, 7, 8]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As before, we convert this into &lt;code class=&quot;highlighter-rouge&quot;&gt;lambda&lt;/code&gt; form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_argcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, into anonymous-recursive form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (lambda f, L: f(f, L))(
...     lambda f, L: [L[0].func_code.co_argcount] + f(f, L[1:]) if L else [],
...     funcs)
[1, 2, 3, 4, 5, 6, 7, 8]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;For fun, we’ll factor out argcount operation into an additional function
argument, and obfuscate some variable names:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_argcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;funcs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There’s a new problem now: we still need a way to hide &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;. We can get
these by examining the number of local variables within arbitrary functions:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; (lambda: _).func_code.co_nlocals
0
&amp;gt;&amp;gt;&amp;gt; (lambda _: _).func_code.co_nlocals
1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Even though the function bodies look the same, &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; in the first function is not
an argument, nor is it defined in the function, so Python interprets it as a
global variable:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import dis
&amp;gt;&amp;gt;&amp;gt; dis.dis(lambda: _)
  1           0 LOAD_GLOBAL              0 (_)
              3 RETURN_VALUE
&amp;gt;&amp;gt;&amp;gt; dis.dis(lambda _: _)
  1           0 LOAD_FAST                0 (_)
              3 RETURN_VALUE&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This happens regardless of whether &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; is actually defined in the global scope.&lt;/p&gt;

&lt;p&gt;Putting this into practice:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_nlocals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_nlocals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_argcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;funcs&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we can substitute the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;funcs&lt;/code&gt; in, and then using &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; to pass the
resulting list of integers as eight separate variables, we get this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;__import__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_lnotab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;802616035175250124568770929992&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_nlocals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_nlocals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_argcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;shifting-bits&quot;&gt;Shifting bits&lt;/h2&gt;

&lt;p&gt;Almost there! We’ll replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;n{1..8}&lt;/code&gt; variables with &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;__&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;___&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;____&lt;/code&gt;, etc., since it creates confusion with the variables used in our inner
functions. This doesn’t cause actual problems, since scoping rules mean the
right ones will be used. This is also one of the reasons why we refactored
&lt;code class=&quot;highlighter-rouge&quot;&gt;256&lt;/code&gt; out to where &lt;code class=&quot;highlighter-rouge&quot;&gt;_&lt;/code&gt; refers to &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt; instead of our obfuscated &lt;code class=&quot;highlighter-rouge&quot;&gt;convert()&lt;/code&gt;
function. It’s getting long, so I’ll paste only the first half:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;__import__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_lnotab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;802616035175250124568770929992&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Only two more things are left. We’ll start with the easy one: &lt;code class=&quot;highlighter-rouge&quot;&gt;256&lt;/code&gt;.
&lt;span&gt;\(256 = 2^8\)&lt;/span&gt;, so we can rewrite it as &lt;code class=&quot;highlighter-rouge&quot;&gt;1 &amp;lt;&amp;lt; 8&lt;/code&gt; (using a
&lt;a href=&quot;//stackoverflow.com/a/141873&quot;&gt;left bit shift&lt;/a&gt;), or &lt;code class=&quot;highlighter-rouge&quot;&gt;_ &amp;lt;&amp;lt; ________&lt;/code&gt; with our
obfuscated variables.&lt;/p&gt;

&lt;p&gt;We’ll use the same idea with &lt;code class=&quot;highlighter-rouge&quot;&gt;802616035175250124568770929992&lt;/code&gt;. A simple
divide-and-conquer algorithm can break it up into sums of numbers which are
themselves sums of numbers that are shifted together, and so on. For example,
if we had &lt;code class=&quot;highlighter-rouge&quot;&gt;112&lt;/code&gt;, we could break it up into &lt;code class=&quot;highlighter-rouge&quot;&gt;96 + 16&lt;/code&gt; and then
&lt;code class=&quot;highlighter-rouge&quot;&gt;(3 &amp;lt;&amp;lt; 5) + (2 &amp;lt;&amp;lt; 3)&lt;/code&gt;. I like using bit shifts because the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; reminds me of
&lt;code class=&quot;highlighter-rouge&quot;&gt;std::cout &amp;lt;&amp;lt; &quot;foo&quot;&lt;/code&gt; in C++, or
&lt;a href=&quot;//docs.python.org/2/reference/simple_stmts.html#the-print-statement&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;print&lt;/code&gt; chevron&lt;/a&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;print &amp;gt;&amp;gt;&lt;/code&gt;) in Python, both of which are red herrings involving other ways of
doing I/O.&lt;/p&gt;

&lt;p&gt;The number can be decomposed in a variety of ways; no one method is correct
(after all, we could just break it up into &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 &amp;lt;&amp;lt; 0) + (1 &amp;lt;&amp;lt; 0) + ...&lt;/code&gt;, but
that’s not interesting). We should have some substantial amount of nesting, but
still use most of our numerical variables. Obviously, doing this by hand isn’t
fun, so we’ll come up with an algorithm. In pseudocode:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;func encode(num):
    if num &amp;lt;= 8:
        return &quot;_&quot; * num
    else:
        return &quot;(&quot; + convert(num) + &quot;)&quot;

func convert(num):
    base = shift = 0
    diff = num
    span = ...
    for test_base in range(span):
        for test_shift in range(span):
            test_diff = |num| - (test_base &amp;lt;&amp;lt; test_shift)
            if |test_diff| &amp;lt; |diff|:
                diff = test_diff
                base = test_base
                shift = test_shift
    encoded = &quot;(&quot; + encode(base) + &quot; &amp;lt;&amp;lt; &quot; + encode(shift) + &quot;)&quot;
    if diff == 0:
        return encoded
    else:
        return encoded + &quot; + &quot; + convert(diff)

convert(802616035175250124568770929992)&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The basic idea here is that we test various combinations of numbers in a
certain range until we come up with two numbers, &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt;,
such that &lt;code class=&quot;highlighter-rouge&quot;&gt;base &amp;lt;&amp;lt; shift&lt;/code&gt; is as closest to &lt;code class=&quot;highlighter-rouge&quot;&gt;num&lt;/code&gt; as possible (i.e. we minimize
their absolute difference, &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;). We then use our divide-and-conquer
algorithm to break up &lt;code class=&quot;highlighter-rouge&quot;&gt;best_base&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;best_shift&lt;/code&gt;, and then repeat the
procedure on &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; until it reaches zero, summing the terms along the way.&lt;/p&gt;

&lt;p&gt;The argument to &lt;code class=&quot;highlighter-rouge&quot;&gt;range()&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt;, represents the width of the search space.
This can’t be too large, or we’ll end getting &lt;code class=&quot;highlighter-rouge&quot;&gt;num&lt;/code&gt; as our &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt; as
our &lt;code class=&quot;highlighter-rouge&quot;&gt;shift&lt;/code&gt; (because &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; is zero), and since &lt;code class=&quot;highlighter-rouge&quot;&gt;base&lt;/code&gt; can’t be represented as
a single variable, it’ll repeat, recursing infinitely. If it’s too small, we’ll
end up with something like the &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 &amp;lt;&amp;lt; 0) + (1 &amp;lt;&amp;lt; 0) + ...&lt;/code&gt; mentioned above. In
practice, we want &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt; to get smaller as the recursion depth increases.
Through trial and error, I found this equation to work well:&lt;/p&gt;

&lt;div&gt;$$\mathit{span} = \lceil\log_{1.5} \lvert{\mathit{num}}\lvert\rceil + \lfloor2^{4-\mathit{depth}}\rfloor$$&lt;/div&gt;

&lt;p&gt;Translating the pseudocode into Python and making some tweaks (support for the
&lt;code class=&quot;highlighter-rouge&quot;&gt;depth&lt;/code&gt; argument, and some caveats involving negative numbers), we get this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_ - _&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;_&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;span&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_base&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_shift&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;xrange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;test_diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_diff&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_base&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_shift&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; + &quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; - &quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s &amp;lt;&amp;lt; &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s)&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                      &lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;diff&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, when we call &lt;code class=&quot;highlighter-rouge&quot;&gt;convert(802616035175250124568770929992)&lt;/code&gt;, we get a nice
decomposition:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; convert(802616035175250124568770929992)
(((_____ &amp;lt;&amp;lt; ____) + _) &amp;lt;&amp;lt; ((___ &amp;lt;&amp;lt; _____) - ___)) + (((((___ &amp;lt;&amp;lt; __) - _) &amp;lt;&amp;lt; ___) + _) &amp;lt;&amp;lt; ((_____ &amp;lt;&amp;lt; ____) + (_ &amp;lt;&amp;lt; _))) + (((_______ &amp;lt;&amp;lt; __) - _) &amp;lt;&amp;lt; (((((_ &amp;lt;&amp;lt; ___) + _)) &amp;lt;&amp;lt; ___) + (_ &amp;lt;&amp;lt; _))) + (((_______ &amp;lt;&amp;lt; ___) + _) &amp;lt;&amp;lt; ((_ &amp;lt;&amp;lt; ______) + _)) + (((_______ &amp;lt;&amp;lt; ____) - _) &amp;lt;&amp;lt; ((_______ &amp;lt;&amp;lt; ___))) + (((_ &amp;lt;&amp;lt; ____) - _) &amp;lt;&amp;lt; ((((___ &amp;lt;&amp;lt; __) + _) &amp;lt;&amp;lt; __) - _)) - (_______ &amp;lt;&amp;lt; ((((___ &amp;lt;&amp;lt; __) - _) &amp;lt;&amp;lt; __) + _)) + (_______ &amp;lt;&amp;lt; (((((_ &amp;lt;&amp;lt; ___) + _)) &amp;lt;&amp;lt; __))) - ((((((_ &amp;lt;&amp;lt; ___) + _)) &amp;lt;&amp;lt; __) + _) &amp;lt;&amp;lt; ((((___ &amp;lt;&amp;lt; __) + _) &amp;lt;&amp;lt; _))) + (((_______ &amp;lt;&amp;lt; __) - _) &amp;lt;&amp;lt; (((((_ &amp;lt;&amp;lt; ___) + _)) &amp;lt;&amp;lt; _))) + (((___ &amp;lt;&amp;lt; ___) + _) &amp;lt;&amp;lt; ((_____ &amp;lt;&amp;lt; _))) + (_____ &amp;lt;&amp;lt; ______) + (_ &amp;lt;&amp;lt; ___)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Stick this in as a replacement for &lt;code class=&quot;highlighter-rouge&quot;&gt;802616035175250124568770929992&lt;/code&gt;, and put
all the parts together:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;__import__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__eq__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__iter__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__class__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_lnotab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;(((((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_nlocals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_nlocals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;func_code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;co_argcount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;___&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_____&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_______&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;________&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And there you have it.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <id>https://byetimes.com/2012/01/29/earwigbot-and-toolserver-updates</id>
            <title>EarwigBot and Toolserver Updates</title>
            <updated>2012-01-29T00:00:00+08:00</updated>
            <published>2012-01-29T00:00:00+08:00</published>
            <link rel="alternate" type="text/html" href="/2012/01/29/earwigbot-and-toolserver-updates.html"/>
            <author>
                <name>Ben Kurtovic</name>
                <email>ben.kurtovic@gmail.com</email>
                <uri>https://benkurtovic.com/</uri>
            </author>
            <summary>More progress on EarwigBot and the Toolserver site rewrite, including dynamic backgrounds</summary>
            <content type="html">&lt;p&gt;Haven’t really said much in a while, so I felt it appropriate to make a new
blog post. No, I’m not dead, and yes, I &lt;em&gt;am&lt;/em&gt; busy working on my Wikipedia
responsibilities, including EarwigBot and my Toolserver site (which I’ll go
into detail about in a bit). Progress is not as quick now as it was over the
summer, and you can blame school for the delay in getting things done. My
primary to-do list for Wikipedia right now looks like this:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Finish copyvio detection in the new EarwigBot&lt;/li&gt;
  &lt;li&gt;Integrate EarwigBot’s copyvio detection with the new Toolserver site&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;#1 has a good portion of its work done, but I still have to finish the actual
detection. I’ve isolated the work down to a few methods of
&lt;code class=&quot;highlighter-rouge&quot;&gt;earwigbot.wiki.copyright.CopyrightMixin&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;_copyvio_strip_html()&lt;/code&gt;, to
extract the “text” (i.e. content inside &amp;lt;p&amp;gt; tags) from an HTML document
(I’ll probably use something like
&lt;a href=&quot;http://www.crummy.com/software/BeautifulSoup/&quot;&gt;Beautiful Soup&lt;/a&gt; for this);
&lt;code class=&quot;highlighter-rouge&quot;&gt;_copyvio_strip_article()&lt;/code&gt;, to extract the “text” from an article (that is,
stripping templates, quotes, references); and &lt;code class=&quot;highlighter-rouge&quot;&gt;_copyvio_chunk_article()&lt;/code&gt;, to
divide a stripped article into a list of web-searchable queries. Everything
else, including the Task class for &lt;code class=&quot;highlighter-rouge&quot;&gt;afc_copyvios&lt;/code&gt; is done.&lt;/p&gt;

&lt;p&gt;#2 is very simple once #1 is done. I’ve already written the code to load
EarwigBot’s wiki toolset from &lt;code class=&quot;highlighter-rouge&quot;&gt;copyvios.mako&lt;/code&gt;, and the config file is written,
so running the detector is trivial once it works. The only thing left here is
to have the tool produce relatively eye-pleasing output, perhaps with a
“details” section showing the Markov chains formed from the two sources and
comparing them visually. Not necessary at all, but a nice touch.&lt;/p&gt;

&lt;p&gt;Unfortunately, there’s still a bit more work to do on EarwigBot before he’s
ready for his first release (0.1!). Aside from the copyvio stuff above, which
is integrated directly as a function of &lt;code class=&quot;highlighter-rouge&quot;&gt;Page&lt;/code&gt;, I want to finish porting over
the remaining tasks from old EarwigBot that are still running via cron, improve
the Wiki Toolset such that new sites can be added programmatically, and improve
config such that it can be created by the bot and not only by hand. This is the
main barrier stopping other people from running EarwigBot, and thus the primary
concern before v0.1 is good. Of course, none of this urgent; getting copyvio
detection finished is my primary concern.&lt;/p&gt;

&lt;h2 id=&quot;dynamic-backgrounds&quot;&gt;Dynamic Backgrounds&lt;/h2&gt;

&lt;p&gt;Now that that’s covered, let’s look at something (mostly unrelated) I finished
a couple days ago: dynamic backgrounds for
&lt;a href=&quot;http://toolserver.org/~earwig/rewrite&quot;&gt;my new toolserver site&lt;/a&gt;! You can see it
in action a bit better on &lt;a href=&quot;http://toolserver.org/~earwig/earwigbot&quot;&gt;this page&lt;/a&gt;.
The background is the the &lt;a href=&quot;//commons.wikimedia.org/&quot;&gt;Wikimedia Commons&lt;/a&gt;
&lt;a href=&quot;//commons.wikimedia.org/wiki/Commons:Picture_of_the_day&quot;&gt;Picture of the Day&lt;/a&gt;,
loaded and displayed with JavaScript.
&lt;a href=&quot;//github.com/earwig/toolserver/blob/master/static/js/potd.js&quot;&gt;Here’s the code for it&lt;/a&gt;,
a good deal more code than I had expected to write.&lt;/p&gt;

&lt;p&gt;Here’s what we have to do:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Query Commons’ API for the content of the template {{Potd/YYY-MM-DD}}.&lt;/li&gt;
  &lt;li&gt;Parse that content for the filename of the image, which will be hidden in
something like {{Potd filename|1=Foo.png}}.&lt;/li&gt;
  &lt;li&gt;Query Commons’ API again for Foo.png’s URL and dimensions.&lt;/li&gt;
  &lt;li&gt;Since we want the image to “cover” the background (that is, be the smallest
size possible while leaving none of the background color visible), we need
to calculate the image’s aspect ratio and our own aspect ratio, then
determine the width of the thumbnail we want. If the image is shorter than
our screen, the necessary width is our screen’s width, but if the image is
longer than our screen, the necessary width is our screen’s height
multiplied by the image’s aspect ratio.&lt;/li&gt;
  &lt;li&gt;If the width of our desired thumbnail is less than the width of the image,
we’ll alter the image’s URL (insert a &lt;code class=&quot;highlighter-rouge&quot;&gt;/thumb/&lt;/code&gt; in the middle somewhere and
add a resolution at the end) and set that as our &lt;code class=&quot;highlighter-rouge&quot;&gt;body&lt;/code&gt;’s &lt;code class=&quot;highlighter-rouge&quot;&gt;background-image&lt;/code&gt;
property. This is better than loading the full image and downscaling it,
because less bandwidth is required.&lt;/li&gt;
  &lt;li&gt;If the width of our desired thumbnail is &lt;em&gt;greater&lt;/em&gt; than (or equal to) the
width of the image, we load the full image and upscale it (gasp! horror!)
using the CSS bit &lt;code class=&quot;highlighter-rouge&quot;&gt;background-size: cover;&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All of the images I tested looked decent when displayed under this method, some
better than others, but all acceptable. I figured this code provided a nice
touch to an otherwise drab webpage (like the one you’re viewing now, it
wouldn’t have been very pretty), which is why I did it, but I couldn’t help but
wonder if there was an… easier… method that still saved bandwidth and
didn’t resort to ugly scaling/cropping/repeating/whatever, but I could come up
with nothing. It was a fun project in a language I almost never use, though, so
worth it in the end.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;That’s all for now!&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;—earwig&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
</content>
        </entry>
    
        <entry>
            <id>https://byetimes.com/2011/08/23/earwigbot-progress-page-editing</id>
            <title>EarwigBot Progress&amp;#58; Page Editing</title>
            <updated>2011-08-23T00:00:00+08:00</updated>
            <published>2011-08-23T00:00:00+08:00</published>
            <link rel="alternate" type="text/html" href="/2011/08/23/earwigbot-progress-page-editing.html"/>
            <author>
                <name>Ben Kurtovic</name>
                <email>ben.kurtovic@gmail.com</email>
                <uri>https://benkurtovic.com/</uri>
            </author>
            <summary>Exactly what it says on the tin</summary>
            <content type="html">&lt;p&gt;Because of &lt;a href=&quot;http://git.io/Nw-rLQ&quot;&gt;this&lt;/a&gt;, doing this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import wiki
&amp;gt;&amp;gt;&amp;gt; site = wiki.get_site()
&amp;gt;&amp;gt;&amp;gt; page = site.get_page(&quot;User:EarwigBot/Sandbox&quot;)
&amp;gt;&amp;gt;&amp;gt; page.edit(&quot;I can has content?&quot;, &quot;BOT: Testing new framework&quot;, minor=True)
&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;…produces
&lt;a href=&quot;//en.wikipedia.org/w/index.php?title=User%3AEarwigBot%2FSandbox&amp;amp;diff=prev&amp;amp;oldid=446401978&quot;&gt;this&lt;/a&gt;.
Clearly a MASSIVE DEVELOPMENT.&lt;/p&gt;

&lt;p&gt;After 5,800 lines of code, 54 files, and over 200 commits, EarwigBot can
actually edit Wikipedia!&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Yay!&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;—earwig&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
</content>
        </entry>
    
        <entry>
            <id>https://byetimes.com/2011/08/05/earwigbot-progress-wiki-toolset</id>
            <title>EarwigBot Progress&amp;#58; Wiki Toolset</title>
            <updated>2011-08-05T00:00:00+08:00</updated>
            <published>2011-08-05T00:00:00+08:00</published>
            <link rel="alternate" type="text/html" href="/2011/08/05/earwigbot-progress-wiki-toolset.html"/>
            <author>
                <name>Ben Kurtovic</name>
                <email>ben.kurtovic@gmail.com</email>
                <uri>https://benkurtovic.com/</uri>
            </author>
            <summary>YAWTF (Yet Another Wiki Tools Framework, or Yet Another... WTF?)</summary>
            <content type="html">&lt;p&gt;&lt;strong&gt;Update Aug 08, 2011&lt;/strong&gt;: Some changes made thanks to updates in the new
&lt;code class=&quot;highlighter-rouge&quot;&gt;feature/tests-framework&lt;/code&gt; branch.&lt;/p&gt;

&lt;p&gt;So I’ve been spending the past week and a half working on EarwigBot’s new
wikitools framework thing (to avoid confusion with Mr.Z-man’s
&lt;code class=&quot;highlighter-rouge&quot;&gt;python-wikitools&lt;/code&gt; package, I’m referring to it as “EarwigBot’s Wiki Toolset”
in the docs, even though it’s just &lt;code class=&quot;highlighter-rouge&quot;&gt;wiki&lt;/code&gt; internally). Basically, it’s the
interface between EarwigBot and the MediaWiki API.&lt;/p&gt;

&lt;p&gt;As Josh put it, this is “the thing that actually makes it work”.&lt;/p&gt;

&lt;p&gt;So, now you can do this (from within Python’s interpreter, a wiki bot task, or
an IRC command):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; import wiki
&amp;gt;&amp;gt;&amp;gt; site = wiki.get_site()
&amp;gt;&amp;gt;&amp;gt; print site.name()
enwiki
&amp;gt;&amp;gt;&amp;gt; print site.project()
wikipedia
&amp;gt;&amp;gt;&amp;gt; print site.lang()
en
&amp;gt;&amp;gt;&amp;gt; print site.domain()
en.wikipedia.org&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;config.json&lt;/code&gt; file stores site information, along with our chosen “default
site”. Pretty neat, huh? “But what can it actually do?” I hear you ask? Well,
for example, we can get information about users:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; user = site.get_user(&quot;The Earwig&quot;)
&amp;gt;&amp;gt;&amp;gt; print user.editcount()
11079
&amp;gt;&amp;gt;&amp;gt; print user.groups()
[u&#39;*&#39;, u&#39;user&#39;, u&#39;autoconfirmed&#39;, u&#39;abusefilter&#39;, u&#39;sysop&#39;]
&amp;gt;&amp;gt;&amp;gt; reg = user.registration()
&amp;gt;&amp;gt;&amp;gt; import time
&amp;gt;&amp;gt;&amp;gt; print time.strftime(&quot;%a, %d %b %Y %H:%M:%S&quot;, reg)
Thu, 03 Jul 2008 21:51:34&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and pages as well, with intelligent namespace logic:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; page = site.get_page(&quot;Wikipedia:Articles for creation&quot;)
&amp;gt;&amp;gt;&amp;gt; print page.url()
http://en.wikipedia.org/wiki/Wikipedia:Articles_for_creation
&amp;gt;&amp;gt;&amp;gt; print page.creator()
Uncle G
&amp;gt;&amp;gt;&amp;gt; print page.namespace()
4
&amp;gt;&amp;gt;&amp;gt; print site.namespace_id_to_name(4)
Wikipedia
&amp;gt;&amp;gt;&amp;gt; print site.namespace_id_to_name(4, all=True)
[u&#39;Wikipedia&#39;, u&#39;Project&#39;, u&#39;WP&#39;]
&amp;gt;&amp;gt;&amp;gt; print page.is_talkpage()
False

&amp;gt;&amp;gt;&amp;gt; talkpage = page.toggle_talk()
&amp;gt;&amp;gt;&amp;gt; print talkpage.title()
Wikipedia talk:Articles for creation
&amp;gt;&amp;gt;&amp;gt; print talkpage.is_talkpage()
True&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and with support for redirect following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; page = site.get_page(&quot;Main page&quot;)
&amp;gt;&amp;gt;&amp;gt; print page.is_redirect()
True
&amp;gt;&amp;gt;&amp;gt; print page.get()
#REDIRECT [[Main Page]]
[[Category:Protected redirects]]
[[Category:Main Page| ]]
&amp;gt;&amp;gt;&amp;gt; print page.get_redirect_target()
Main Page

&amp;gt;&amp;gt;&amp;gt; page = site.get_page(&quot;Main page&quot;, follow_redirects=True)
&amp;gt;&amp;gt;&amp;gt; print page.is_redirect()
False  # would only be True if &quot;Main page&quot; is a double redirect
&amp;gt;&amp;gt;&amp;gt; print page.get()
&amp;lt;!--        BANNER ACROSS TOP OF PAGE        --&amp;gt;
{| id=&quot;mp-topbanner&quot; style=&quot;width:100%; background:#f9f9f9; margin:1.2em 0 6px 0; border:1px solid #ddd;&quot;
| style=&quot;width:61%; color:#000;&quot; |
...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Of course, a Wiki Toolset would be nothing without login! Our username and
password are stored (encrypted with Blowfish) in the bot’s &lt;code class=&quot;highlighter-rouge&quot;&gt;config.json&lt;/code&gt; file,
and we login automatically whenever we create a new Site object – unless
we’re already logged in, of course, and we know that based on whether we have
valid login cookies.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; user = site.get_user()  # gets the logged-in user
&amp;gt;&amp;gt;&amp;gt; print user.name()
EarwigBot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Cookies are stored in a special &lt;code class=&quot;highlighter-rouge&quot;&gt;.cookies&lt;/code&gt; file in the project root (with no
access given to other users, of course). We support both per-project login and
CentralAuth, meaning I can do…&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-pycon&quot; data-lang=&quot;pycon&quot;&gt;&amp;gt;&amp;gt;&amp;gt; es = wiki.get_site(&quot;eswiki&quot;)
&amp;gt;&amp;gt;&amp;gt; print es.get_user().name()
EarwigBot&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;without making additional logins. One thing I strove for when designing the
toolset was as minimal API usage as possible – we accept gzipped data, we
don’t make API queries unless they’re actually requested, and we combine
queries whenever possible. Of course, I’m probably doing it all wrong, but
it seems to be working so far.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;So… yeah. Carry on then!&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;—earwig&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
</content>
        </entry>
    
        <entry>
            <id>https://byetimes.com/2011/06/23/oh-look-a-blog</id>
            <title>Oh Look, A Blog!</title>
            <updated>2011-06-23T00:00:00+08:00</updated>
            <published>2011-06-23T00:00:00+08:00</published>
            <link rel="alternate" type="text/html" href="/2011/06/23/oh-look-a-blog.html"/>
            <author>
                <name>Ben Kurtovic</name>
                <email>ben.kurtovic@gmail.com</email>
                <uri>https://benkurtovic.com/</uri>
            </author>
            <summary>Just kinda playing with the idea of my own site right now</summary>
            <content type="html">&lt;p&gt;Hello there.&lt;/p&gt;

&lt;p&gt;As you can probably guess, I don’t do web development often (or at all,
really). My experience lies almost completely in scripting languages like
Python, a little C++ and Java, some PHP, and a handful of other things, but I
tend to stick with Python almost entirely (it’s just so awesome!). Designing
actual webpages (aside from coding the logic behind them – that’s another
story) is kinda foreign to me.&lt;/p&gt;

&lt;p&gt;I’m hoping to come up with a decent HTML/CSS design here over time, and
eventually use the code in the rewrite of my
&lt;a href=&quot;http://toolserver.org/~earwig&quot;&gt;Toolserver&lt;/a&gt; site. That desperately needs to be
updated. Half of the “tools” don’t even work!&lt;/p&gt;

&lt;p&gt;Either way, the Toolserver site rewrite (which will eventually be a GitHub
repo) will go hand-in-hand with the EarwigBot rewrite that has been underway
since April. I’m thinking that there will be a main repository –
something like &lt;code class=&quot;highlighter-rouge&quot;&gt;earwig/toolserver-public&lt;/code&gt; – that will essentially be
everything inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;public_html&lt;/code&gt; folder. That will contain docs about
EarwigBot and my various (new) tools, the main &lt;code class=&quot;highlighter-rouge&quot;&gt;index.(html|php)&lt;/code&gt; file, and the
CSS/image crud. Individual tools, which consist of code and web UI, will be
their own repos (think &lt;code class=&quot;highlighter-rouge&quot;&gt;earwig/toolserver-copyvio-intersect&lt;/code&gt;) which will be git
submodules in the main &lt;code class=&quot;highlighter-rouge&quot;&gt;toolserver-public&lt;/code&gt; repo. I think this could work.&lt;/p&gt;

&lt;p&gt;Right now, I have to finish up EarwigBot’s &lt;code class=&quot;highlighter-rouge&quot;&gt;feature/config-rewrite&lt;/code&gt; branch,
merge that into develop, and get the live version of EarwigBot’s config files
updated. Once that’s settled, the bot’s backbone is essentially complete
(finally!) The only remaining tasks are to start working on the actual wiki API
interface, and when that’s done, the bot tasks themselves. Easily a summer of
work, but when it’s complete, EarwigBot should be mostly finished, and up to at
least version 1.0!&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;So… questions? Comments? H8 mail? &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#098;&amp;#101;&amp;#110;&amp;#046;&amp;#107;&amp;#117;&amp;#114;&amp;#116;&amp;#111;&amp;#118;&amp;#105;&amp;#099;&amp;#064;&amp;#103;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&quot;&gt;Lay it on me!&lt;/a&gt;&lt;/dt&gt;
  &lt;dd&gt;
    &lt;p&gt;—earwig&lt;/p&gt;
  &lt;/dd&gt;
&lt;/dl&gt;
</content>
        </entry>
    
</feed>
